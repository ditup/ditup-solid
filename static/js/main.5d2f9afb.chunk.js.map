{"version":3,"sources":["Header.module.scss","Homepage.module.scss","DitItemForm.module.scss","DitList.module.scss","api.ts","app/hooks.ts","config.ts","app/services/solidApi.ts","app/services/interestApi.ts","features/login/loginAPI.ts","features/login/loginSlice.ts","app/services/ditapi.ts","useQuery.ts","app/store.ts","app/services/useQueries.ts","SearchInput.tsx","InterestSearchInput.tsx","EditableTagList.tsx","DitItemForm.tsx","CreateDit.tsx","TagList.tsx","DitItem.tsx","DitItemPage.tsx","DitList.tsx","assets/logo-white.svg","Header.tsx","features/login/Login.tsx","assets/main-image.png","Homepage.tsx","Person.tsx","Signup.tsx","EditDitPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","fetchImage","uri","a","fetch","response","headers","get","Buffer","arrayBuffer","from","toString","image","useAppDispatch","useDispatch","useAppSelector","useSelector","ditUris","idea","problem","solidApi","createApi","reducerPath","baseQuery","data","fetchProperties","fetchAll","getSolidDataset","dataset","createSolidDataset","remove","forEach","subject","predicate","object","thing","getThing","changedDataset","removeThing","updatedThing","removeAll","setThing","removeUrl","setString","createThing","url","setStringWithLocale","set","setUrl","add","addUrl","saveSolidDatasetAt","returnThings","getThingAll","filter","returnData","map","returnThing","Object","fromEntries","entries","key","value","getUrlAll","getStringEnglishAll","getStringNoLocaleAll","length","find","error","message","tagTypes","endpoints","build","readPerson","query","name","foaf","photo","vcard","hasPhoto","interests","topic_interest","providesTags","result","type","id","transformResponse","readDitItem","rdf","label","rdfs","description","dc","tags","as","tag","keys","readDitItems","things","includes","results","addInterest","mutation","interest","invalidatesTags","removeInterest","createDit","updateDit","removeDit","getDitupUri","webId","baseUrl","exec","Error","interestApi","fetchBaseQuery","searchInterests","encodeURIComponent","search","concepturi","concat","readInterest","match","wikidataRegex","meta","entity","values","entities","labels","en","descriptions","login","oidcIssuer","solidLogin","redirectUrl","globalThis","location","href","clientName","init","handleIncomingRedirect","restorePreviousSession","getDefaultSession","info","createAsyncThunk","api","logout","loginSlice","createSlice","initialState","isLoggedIn","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","rejected","action","alert","payload","selectLogin","sparqlEngine","QueryEngine","ditapi","baseSources","sources","queryBindings","bindingsStream","toArray","binding","comunicaBaseQuery","getUser","store","configureStore","reducer","loginReducer","middleware","getDefaultMiddleware","useQueries","params","useEffect","param","dispatch","initiate","unsubscribe","select","SearchInput","options","isLoading","onChange","onSelect","e","target","option","onClick","InterestSearchInput","useState","setQuery","debouncedQuery","setDebouncedQuery","debouncedSet","useMemo","debounce","useQuery","skipToken","EditableTagList","onAddTag","onRemoveTag","tagsToFind","fetchedTags","combinedTags","i","split","pop","style","display","listStyleType","flexWrap","paddingLeft","margin","title","slice","TYPE_OPTIONS","DitItemForm","onSubmit","disabled","readonlyUri","setType","setLabel","setDescription","setTags","setUri","className","styles","form","preventDefault","defaultValue","cols","rows","tagUri","console","log","t","CreateDit","useMutation","isSuccess","to","crypto","randomUUID","TagList","DitItem","DitItemPage","itemUri","useParams","isUninitialized","isRemoving","DitList","list","Header","header","homeLink","logo","src","alt","separator","Login","provider","setProvider","handleSubmit","Homepage","page","wrapper","homeImage","Person","personId","loginUri","personUri","setImage","img","width","join","Signup","DitItemFormPage","isUpdating","App","path","element","EditDitPage","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5d2f9afb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__34Mnk\",\"homeLink\":\"Header_homeLink__2Plqh\",\"logo\":\"Header_logo__3Vr_I\",\"separator\":\"Header_separator__jCo-_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Homepage_page__3ASb0\",\"wrapper\":\"Homepage_wrapper__yr9nO\",\"homeImage\":\"Homepage_homeImage__1og7O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"DitItemForm_form__PfJgE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"DitList_list__3_Ohh\"};","import { fetch } from '@inrupt/solid-client-authn-browser'\n\nexport const fetchImage = async (uri: string): Promise<string> => {\n  const response = await fetch(uri)\n\n  const image = `data:${response.headers.get(\n    'content-type',\n  )};base64,${Buffer.from(await response.arrayBuffer()).toString('base64')}`\n  return image\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","export const ditUris = {\n  idea: 'https://ditup.example#Idea' as const,\n  problem: 'https://ditup.example#Problem' as const,\n} as const\n","// Need to use the React-specific entry point to import createApi\nimport {\n  addUrl,\n  createSolidDataset,\n  createThing,\n  getSolidDataset,\n  getStringEnglishAll,\n  getStringNoLocaleAll,\n  getThing,\n  getThingAll,\n  getUrlAll,\n  removeAll,\n  removeThing,\n  removeUrl,\n  saveSolidDatasetAt,\n  setStringWithLocale,\n  setThing,\n  setUrl,\n  SolidDataset,\n  ThingPersisted,\n  WithChangeLog,\n} from '@inrupt/solid-client'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport { BaseQueryFn, createApi } from '@reduxjs/toolkit/query/react'\nimport { as, dc, foaf, rdf, rdfs, vcard } from 'rdf-namespaces'\nimport { ditUris } from '../../config'\nimport { DitThing, DitType, Person, Uri } from '../../types'\n\ntype Triple = [string, string, string]\n\ntype MutationData = {\n  add?: Triple[]\n  set?: Triple[]\n  remove?: Triple[]\n  setString?: Triple[] // TODO think about language strings\n}\n\ntype FetchShape = {\n  [key: string]: string\n}\n\ntype QueryResponse = {\n  [key: string]: string[]\n  uri: string[] /* this fixes an annoying TS error */\n}\n\ninterface QueryParams {\n  uri: string\n  fetchProperties: FetchShape\n  data?: MutationData\n  fetchAll?: boolean\n}\n\nconst solidQuery =\n  (): BaseQueryFn<QueryParams, QueryResponse[], { message: string }> =>\n  async ({ uri, data, fetchProperties, fetchAll = false }: QueryParams) => {\n    let dataset: SolidDataset\n    try {\n      dataset = await getSolidDataset(uri, { fetch })\n    } catch (e) {\n      dataset = createSolidDataset()\n    }\n\n    let changedDataset: (SolidDataset & WithChangeLog) | undefined\n\n    if (data?.remove)\n      data.remove.forEach(([subject, predicate, object]) => {\n        const thing = getThing(changedDataset ?? dataset, subject)\n        if (thing) {\n          if (predicate === '*') {\n            changedDataset = removeThing(changedDataset ?? dataset, thing)\n          } else if (object === '*') {\n            const updatedThing = removeAll(thing, predicate)\n            changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n          } else {\n            const updatedThing = removeUrl(thing, predicate, object)\n            changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n          }\n        }\n      })\n\n    if (data?.setString)\n      data.setString.forEach(([subject, predicate, object]) => {\n        const thing =\n          getThing(changedDataset ?? dataset, subject) ??\n          createThing({ url: subject })\n        if (thing) {\n          const updatedThing = setStringWithLocale(\n            thing,\n            predicate,\n            object,\n            'en',\n          )\n          changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n        }\n      })\n\n    if (data?.set)\n      data.set.forEach(([subject, predicate, object]) => {\n        const thing =\n          getThing(changedDataset ?? dataset, subject) ??\n          createThing({ url: subject })\n        if (thing) {\n          const updatedThing = setUrl(thing, predicate, object)\n          changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n        }\n      })\n\n    if (data?.add)\n      data.add.forEach(([subject, predicate, object]) => {\n        const thing =\n          getThing(changedDataset ?? dataset, subject) ??\n          createThing({ url: subject })\n\n        const updatedThing = addUrl(thing, predicate, object)\n        changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n      })\n\n    if (changedDataset) {\n      await saveSolidDatasetAt(uri, changedDataset, { fetch })\n    }\n\n    let returnThings: ThingPersisted[]\n    if (!fetchAll) {\n      returnThings = [getThing(changedDataset ?? dataset, uri)].filter(\n        a => !!a,\n      ) as ThingPersisted[]\n    } else {\n      returnThings = getThingAll(changedDataset ?? dataset)\n    }\n\n    const returnData = returnThings.map(returnThing => ({\n      ...Object.fromEntries(\n        Object.entries(fetchProperties).map(([key, value]) => [\n          key,\n          [\n            ...getUrlAll(returnThing, value),\n            ...getStringEnglishAll(returnThing, value),\n            ...getStringNoLocaleAll(returnThing, value),\n          ],\n        ]),\n      ),\n      uri: [returnThing.url],\n    }))\n\n    if (\n      !fetchAll &&\n      returnData.length === 0 &&\n      // also don't error when mutation removed the whole thing\n      !(data?.remove ?? []).find(([, predicate]) => predicate === '*')\n    )\n      return {\n        error: { message: 'thing not found' },\n      }\n\n    return {\n      data: returnData,\n    }\n  }\n\n// Define a service using a base URL and expected endpoints\nexport const solidApi = createApi({\n  reducerPath: 'solidapi',\n  baseQuery: solidQuery(),\n  tagTypes: ['Person', 'DitThing'],\n  endpoints: build => ({\n    readPerson: build.query<Person, string>({\n      query: uri => ({\n        uri,\n        fetchProperties: {\n          name: foaf.name,\n          photo: vcard.hasPhoto,\n          interests: foaf.topic_interest,\n        },\n      }),\n      providesTags: (result, error, uri) => [{ type: 'Person', id: uri }],\n      transformResponse: ([{ uri, name, photo, interests }]) => ({\n        uri: uri[0],\n        name: name[0] ?? '',\n        photo: photo[0] ?? '',\n        interests,\n      }),\n    }),\n    readDitItem: build.query<DitThing, Uri>({\n      query: uri => ({\n        uri,\n        fetchProperties: {\n          type: rdf.type,\n          label: rdfs.label,\n          description: dc.description,\n          tags: as.tag,\n        },\n      }),\n      transformResponse: ([{ uri, type, label, description, tags }]) => ({\n        uri: uri[0],\n        type:\n          (Object.keys(ditUris) as DitType[]).find(\n            key => ditUris[key] === type[0],\n          ) ?? 'idea',\n        label: label[0],\n        description: description[0],\n        tags,\n      }),\n      providesTags: (result, error, uri) => [{ type: 'DitThing', id: uri }],\n    }),\n    readDitItems: build.query<DitThing[], Uri>({\n      query: uri => ({\n        uri,\n        fetchAll: true,\n        fetchProperties: {\n          type: rdf.type,\n          label: rdfs.label,\n          description: dc.description,\n          tags: as.tag,\n        },\n      }),\n      transformResponse: things => {\n        return things\n          .map(({ uri, type, label, description, tags }) => ({\n            uri: uri[0],\n            type: (Object.keys(ditUris) as DitType[]).find(key =>\n              type.includes(ditUris[key]),\n            ),\n            label: label[0],\n            description: description[0],\n            tags,\n          }))\n          .filter(thing => typeof thing.type !== 'undefined') as DitThing[]\n      },\n      providesTags: results =>\n        (results ?? []).map(result => ({ type: 'DitThing', id: result.uri })),\n    }),\n    addInterest: build.mutation<\n      { interests: string[] },\n      { uri: string; interest: string }\n    >({\n      query: ({ uri, interest }) => ({\n        uri,\n        data: {\n          add: [[uri, foaf.topic_interest, interest]],\n        },\n        fetchProperties: { interests: foaf.topic_interest },\n      }),\n      invalidatesTags: (result, error, { uri }) => [\n        { type: 'Person', id: uri },\n      ],\n    }),\n    removeInterest: build.mutation<\n      { interests: string[] },\n      { uri: string; interest: string }\n    >({\n      query: ({ uri, interest }) => ({\n        uri,\n        data: { remove: [[uri, foaf.topic_interest, interest]] },\n        fetchProperties: { interests: foaf.topic_interest },\n      }),\n      invalidatesTags: (result, error, { uri }) => [\n        { type: 'Person', id: uri },\n      ],\n    }),\n    createDit: build.mutation<Uri, { webId: Uri; thing: DitThing }>({\n      query: ({ thing }) => ({\n        uri: thing.uri,\n        data: {\n          add: [\n            [thing.uri, rdf.type, ditUris[thing.type]],\n            ...thing.tags.map(tag => [thing.uri, as.tag, tag] as Triple),\n          ],\n          setString: [\n            [thing.uri, rdfs.label, thing.label],\n            [thing.uri, dc.description, thing.description],\n          ],\n        },\n        fetchProperties: {},\n      }),\n      transformResponse: ([\n        {\n          uri: [uri],\n        },\n      ]) => uri,\n    }),\n    updateDit: build.mutation<Uri, { thing: DitThing }>({\n      query: ({ thing }) => ({\n        uri: thing.uri,\n        data: {\n          set: [[thing.uri, rdf.type, ditUris[thing.type]]],\n          remove: [[thing.uri, as.tag, '*']],\n          add: thing.tags.map(tag => [thing.uri, as.tag, tag] as Triple),\n          setString: [\n            [thing.uri, rdfs.label, thing.label],\n            [thing.uri, dc.description, thing.description],\n          ],\n        },\n        fetchProperties: {},\n      }),\n      transformResponse: ([\n        {\n          uri: [uri],\n        },\n      ]) => uri,\n      invalidatesTags: (result, error, { thing }) => [\n        { type: 'DitThing', id: thing.uri },\n      ],\n    }),\n    removeDit: build.mutation<unknown, Uri>({\n      query: uri => ({\n        uri,\n        data: {\n          remove: [[uri, '*', '*']],\n        },\n        fetchProperties: {},\n      }),\n      invalidatesTags: (result, error, uri) => [{ type: 'DitThing', id: uri }],\n    }),\n  }),\n})\n\nexport const getDitupUri = (webId: string) => {\n  const baseUrl = /^(https?:\\/\\/.*)\\/profile\\/card#me$/g.exec(webId)?.[1]\n  if (!baseUrl) throw new Error('unable to generate hospex uri from webId')\n  return baseUrl + '/public/ditup.ttl'\n}\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { Interest } from '../../types'\n\nexport const interestApi = createApi({\n  reducerPath: 'interestapi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://www.wikidata.org/w/',\n  }),\n  tagTypes: ['Interest'],\n  endpoints: build => ({\n    searchInterests: build.query<Interest[], string>({\n      query: query => ({\n        url: `api.php?action=wbsearchentities&search=${encodeURIComponent(\n          query,\n        )}&language=en&limit=20&continue=0&format=json&uselang=en&type=item&origin=*`,\n      }),\n      // Pick out data and prevent nested properties in a hook or selector\n      transformResponse: (response: {\n        search: { concepturi: string; label: string; description: string }[]\n      }) =>\n        response.search.map(({ concepturi, label, description }) => ({\n          uri: concepturi,\n          label,\n          description,\n        })),\n      //*/\n      providesTags: (result, error, query) =>\n        (result ?? ([] as Interest[]))\n          .map(({ uri }) => ({ type: 'Interest' as const, id: uri }))\n          .concat([{ type: 'Interest', id: 'QUERY_STRING_' + query }]),\n    }),\n    readInterest: build.query<Interest, string>({\n      query: uri => {\n        const id = uri.match(wikidataRegex)?.[2] ?? ''\n        return {\n          url: `api.php?action=wbgetentities&ids=${id}&languages=en&format=json&origin=*`,\n        }\n      },\n      transformResponse: (\n        response: {\n          entities: {\n            [key: string]: {\n              labels: { en?: { value: string } }\n              descriptions: { en?: { value: string } }\n            }\n          }\n        },\n        meta,\n        uri,\n      ) => {\n        const entity = Object.values(response.entities)[0]\n        if (!entity) throw new Error('entity not found')\n        return {\n          uri,\n          label: entity.labels.en?.value ?? '',\n          description: entity.descriptions.en?.value ?? '',\n        }\n      },\n      providesTags: (result, error, uri) => [{ type: 'Interest', id: uri }],\n    }),\n  }),\n})\n\nconst wikidataRegex =\n  /^https?:\\/\\/(w{3}\\.)?wikidata\\.org\\/entity\\/([A-Z0-9]*)\\/?$/\n/*\nexport const getInterest = async (uri: string): Promise<Interest> => {\n  const wikidataId = uri.match(wikidataRegex)?.[2] ?? ''\n  const dbpediaId = uri.match(dbpediaRegex)?.[2] ?? ''\n  const dataUri = wikidataId\n    ? `https://www.wikidata.org/wiki/Special:EntityData/${wikidataId}.ttl`\n    : dbpediaId\n    ? `https://dbpedia.org/data/${dbpediaId}.ttl`\n    : uri\n  const rawData = await (await fetchTurtle(dataUri)).text()\n  return await parseInterest(rawData, uri)\n}*/\n","import {\n  handleIncomingRedirect,\n  getDefaultSession,\n  login as solidLogin,\n} from '@inrupt/solid-client-authn-browser'\n\nexport const login = async (oidcIssuer: string) =>\n  await solidLogin({\n    oidcIssuer,\n    redirectUrl: globalThis.location.href,\n    clientName: 'ditup',\n  })\n\nexport const init = async () => {\n  await handleIncomingRedirect({\n    url: globalThis.location.href,\n    restorePreviousSession: true,\n  })\n\n  return getDefaultSession().info\n}\n\nexport { logout } from '@inrupt/solid-client-authn-browser'\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport * as api from './loginAPI'\n\nexport interface LoginState {\n  webId: string\n  isLoggedIn: boolean\n  status: 'idle' | 'loading' | 'failed'\n}\n\nconst initialState: LoginState = {\n  webId: '',\n  isLoggedIn: false,\n  status: 'loading',\n}\n\nexport const login = createAsyncThunk('login/login', api.login)\nexport const init = createAsyncThunk('login/init', api.init)\nexport const logout = createAsyncThunk('login/logout', api.logout)\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder\n      .addCase(login.pending, state => {\n        state.status = 'loading'\n      })\n      .addCase(login.fulfilled, state => {\n        state.status = 'idle'\n        state.isLoggedIn = true\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.status = 'failed'\n        alert(action.error.message)\n      })\n      .addCase(init.pending, state => {\n        state.status = 'loading'\n      })\n      .addCase(init.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.isLoggedIn = action.payload.isLoggedIn\n        state.webId = action.payload?.webId ?? ''\n      })\n      .addCase(logout.fulfilled, state => {\n        state.status = 'idle'\n        state.isLoggedIn = false\n        state.webId = ''\n      })\n  },\n})\n\nexport const selectLogin = (state: RootState) => state.login\n\nexport default loginSlice.reducer\n","import { QueryEngine } from '@comunica/query-sparql/lib/index-browser'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport { QueryReturnValue } from '@reduxjs/toolkit/dist/query/baseQueryTypes'\nimport { createApi } from '@reduxjs/toolkit/query/react'\nimport { useMemo } from 'react'\nimport useQuery from '../../useQuery'\n\nconst sparqlEngine = new QueryEngine()\n\ntype User = {\n  name: string\n  photo: string\n}\n\nconst comunicaBaseQuery =\n  ({ baseSources }: { baseSources: string[] } = { baseSources: [] }) =>\n  async <ResponseType extends Record<string, string | null>>({\n    query,\n    sources,\n  }: {\n    query: string\n    sources: string[]\n  }): Promise<\n    QueryReturnValue<ResponseType[], unknown, Record<string, unknown>>\n  > => {\n    const bindingsStream = await sparqlEngine.queryBindings(query, {\n      sources: [...baseSources, ...sources] as [string, ...string[]],\n      fetch,\n    })\n    return {\n      data: (await bindingsStream.toArray()).map(binding => {\n        const keys = [...binding.keys()].map(\n          ({ value }) => value as keyof ResponseType,\n        )\n\n        return Object.fromEntries(\n          keys.map(key => [key, binding.get(key as string)?.value ?? null]),\n        ) as ResponseType\n      }),\n    }\n  }\n\nexport const ditapi = createApi({\n  reducerPath: 'ditapi',\n  baseQuery: comunicaBaseQuery(),\n  endpoints: builder => ({\n    getUser: builder.query<User, string>({\n      query: (webId: string) => ({\n        query: `\n      PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n      PREFIX vcard: <http://www.w3.org/2006/vcard/ns#>\n      SELECT ?name ?photo WHERE {\n        <${webId}> foaf:name ?name.\n        OPTIONAL {<${webId}> vcard:hasPhoto ?photo.}\n      }`,\n        sources: [webId],\n      }),\n      transformResponse: (data: User[]) => data[0],\n    }),\n  }),\n})\n\nexport const useGetUserInterests = (userId: string) => {\n  const query = useMemo(\n    () =>\n      `\n  PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n  PREFIX owl: <http://www.w3.org/2002/07/owl#>\n  PREFIX dbo: <http://dbpedia.org/ontology/>\n  SELECT DISTINCT ?uri ?label ?description\n  WHERE {\n    {\n      <${userId}> foaf:topic_interest ?uri.\n      ?uri rdfs:label ?label.\n      ?uri dbo:abstract ?description.\n    }\n    UNION {\n      <${userId}> foaf:topic_interest ?uri.\n      ?oneUri owl:sameAs ?uri.\n      ?oneUri rdfs:label ?label.\n      ?oneUri dbo:abstract ?description.\n    }\n    FILTER(lang(?label)='en')\n    FILTER(lang(?description)='en')\n  }`,\n    [userId],\n  )\n  const sources: [string, ...string[]] = useMemo(\n    () => [\n      userId,\n      // 'https://query.wikidata.org/sparql',\n      'https://query.wikidata.org/bigdata/ldf',\n      'https://fragments.dbpedia.org/2016-04/en',\n    ],\n    [userId],\n  )\n\n  const [errors, data, isLoading] = useQuery<{\n    uri: string\n    label: string\n    description: string\n  }>(query, sources)\n  return { errors, data, isLoading }\n}\n\n/*import { createApi, BaseQueryFn } from '@reduxjs/toolkit/query'\nimport axios, { AxiosRequestConfig, AxiosError } from 'axios'\n\nconst axiosBaseQuery =\n  (\n    { baseUrl }: { baseUrl: string } = { baseUrl: '' }\n  ): BaseQueryFn<\n    {\n      url: string\n      method: AxiosRequestConfig['method']\n      data?: AxiosRequestConfig['data']\n      params?: AxiosRequestConfig['params']\n    },\n    unknown,\n    unknown\n  > =>\n  async ({ url, method, data, params }) => {\n    try {\n      const result = await axios({ url: baseUrl + url, method, data, params })\n      return { data: result.data }\n    } catch (axiosError) {\n      let err = axiosError as AxiosError\n      return {\n        error: {\n          status: err.response?.status,\n          data: err.response?.data || err.message,\n        },\n      }\n    }\n  }\n\nconst api = createApi({\n  baseQuery: axiosBaseQuery({\n    baseUrl: 'https://example.com',\n  }),\n  endpoints(build) {\n    return {\n      query: build.query({ query: () => ({ url: '/query', method: 'get' }) }),\n      mutation: build.mutation({\n        query: () => ({ url: '/mutation', method: 'post' }),\n      }),\n    }\n  },\n})*/\n/*\nconst bindingsStream = await myEngine.queryBindings(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n});\n\n// Consume results as a stream (best performance)\nbindingsStream.on('data', (binding) => {\n    console.log(binding.toString()); // Quick way to print bindings for testing\n\n    console.log(binding.has('s')); // Will be true\n\n    // Obtaining values\n    console.log(binding.get('s').value);\n    console.log(binding.get('s').termType);\n    console.log(binding.get('p').value);\n    console.log(binding.get('o').value);\n});\nbindingsStream.on('end', () => {\n    // The data-listener will not be called anymore once we get here.\n});\nbindingsStream.on('error', (error) => {\n    console.error(error);\n});\n\n// Consume results as an array (easier)\nconst bindings = await bindingsStream.toArray();\nconsole.log(bindings[0].get('s').value);\nconsole.log(bindings[0].get('s').termType);\n*/\n","import { useEffect, useState } from 'react'\nimport { QueryEngine } from '@comunica/query-sparql/lib/index-browser'\nimport { Bindings } from '@rdfjs/types'\n\nconst myEngine = new QueryEngine()\n\nconst useQuery = <Result extends Record<string, string | null>>(\n  query: string,\n  sources: [string, ...string[]],\n): [unknown[], Result[], boolean] => {\n  const [results, setResults] = useState<Result[]>([])\n  const [errors, setErrors] = useState<unknown[]>([])\n  const [inProgress, setInProgress] = useState(false)\n  useEffect(() => {\n    ;(async () => {\n      setResults([])\n\n      const bindingsStream = await myEngine.queryBindings(query, {\n        sources,\n        lenient: true,\n      })\n\n      setInProgress(true)\n\n      // Consume results as a stream (best performance)\n      bindingsStream.on('data', (binding: Bindings) => {\n        const keys = [...binding.keys()].map(\n          ({ value }) => value as keyof ResponseType,\n        )\n\n        const result = Object.fromEntries(\n          keys.map(key => [key, binding.get(key as string)?.value ?? null]),\n        ) as Result\n\n        setResults(results => [...results, result])\n      })\n      bindingsStream.on('error', error => {\n        console.error(error)\n        setErrors(errors => [...errors, error])\n      })\n      bindingsStream.on('end', () => {\n        setInProgress(false)\n      })\n    })()\n  }, [query, sources])\n  return [errors, results, inProgress]\n}\n\nexport default useQuery\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport loginReducer from '../features/login/loginSlice'\nimport { ditapi } from './services/ditapi'\nimport { solidApi } from './services/solidApi'\nimport { interestApi } from './services/interestApi'\n\nexport const store = configureStore({\n  reducer: {\n    login: loginReducer,\n    [ditapi.reducerPath]: ditapi.reducer,\n    [solidApi.reducerPath]: solidApi.reducer,\n    [interestApi.reducerPath]: interestApi.reducer,\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware()\n      .concat(ditapi.middleware)\n      .concat(solidApi.middleware)\n      .concat(interestApi.middleware),\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// https://github.com/reduxjs/redux-toolkit/discussions/1171#discussioncomment-2554980\n\nimport {\n  QueryDefinition,\n  EndpointDefinitions,\n} from '@reduxjs/toolkit/query/react'\n\nimport { ApiEndpointQuery } from '@reduxjs/toolkit/dist/query/core/module'\nimport { useEffect } from 'react'\nimport { QueryActionCreatorResult } from '@reduxjs/toolkit/dist/query/core/buildInitiate'\nimport { useSelector } from 'react-redux'\nimport { store } from '../store'\n\n/**\n * Allows running a query on a collection of data\n * @param query The RTK ApiEndpointQuery to run\n * @param params a list of params that will be run by the query\n * @returns the rtk query result (same as useGetXQuery())\n */\nexport function useQueries<\n  Q extends QueryDefinition<any, any, any, any>,\n  D extends EndpointDefinitions,\n>(\n  query: ApiEndpointQuery<Q, D>,\n  params: Parameters<typeof query['initiate']>[0][],\n) {\n  useEffect(() => {\n    const results: QueryActionCreatorResult<any>[] = params.map(param =>\n      store.dispatch(query.initiate(param as any)),\n    )\n    return () => {\n      for (const result of results) {\n        result.unsubscribe()\n      }\n    }\n  }, [query, params])\n  return useSelector(state =>\n    params.map(param => query.select(param)(state as any)),\n  )\n}\n","const SearchInput = ({\n  value,\n  options,\n  isLoading,\n  onChange,\n  onSelect,\n}: {\n  value: string\n  options: { label: string; value: string }[]\n  isLoading: boolean\n  onChange: (value: string) => void\n  onSelect: (value: string) => void\n}) => {\n  return (\n    <>\n      <input value={value} onChange={e => onChange(e.target.value)} />\n      {isLoading && 'searching'}\n      <ul>\n        {options.map(option => (\n          <li key={option.value}>\n            <button onClick={() => onSelect(option.value)}>\n              {option.label}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default SearchInput\n","import { useEffect, useMemo, useState } from 'react'\nimport { interestApi } from './app/services/interestApi'\nimport SearchInput from './SearchInput'\nimport { skipToken } from '@reduxjs/toolkit/query/react'\nimport debounce from 'lodash.debounce'\nimport { Interest } from './types'\n\nconst InterestSearchInput = ({\n  onSelect,\n}: {\n  onSelect: (interest: Interest) => void\n}) => {\n  const [query, setQuery] = useState('')\n\n  const [debouncedQuery, setDebouncedQuery] = useState('')\n\n  const debouncedSet = useMemo(() => debounce(setDebouncedQuery, 500), [])\n\n  useEffect(() => {\n    debouncedSet(query)\n  }, [query, debouncedSet])\n\n  const { data: interests, isLoading } =\n    interestApi.endpoints.searchInterests.useQuery(debouncedQuery || skipToken)\n\n  const handleSelect = (uri: string) => {\n    const interest = (interests ?? []).find(interest => interest.uri === uri)\n    if (!interest) throw new Error('this is a glitch')\n    onSelect(interest)\n    setQuery('')\n  }\n  return (\n    <SearchInput\n      value={query}\n      options={((query && interests) || []).map(\n        ({ label, description, uri }) => ({\n          label: `${label}: ${description}`,\n          value: uri,\n        }),\n      )}\n      isLoading={isLoading}\n      onChange={setQuery}\n      onSelect={handleSelect}\n    />\n  )\n}\n\nexport default InterestSearchInput\n","import { FC, useMemo } from 'react'\nimport { interestApi } from './app/services/interestApi'\nimport { useQueries } from './app/services/useQueries'\nimport InterestSearchInput from './InterestSearchInput'\n\ninterface Props {\n  tags: string[]\n  onAddTag: (tag: string) => void\n  onRemoveTag: (tag: string) => void\n}\n\nconst EditableTagList: FC<Props> = ({ tags, onAddTag, onRemoveTag }) => {\n  const tagsToFind = useMemo(\n    () => tags.filter(uri => uri.includes('wikidata')),\n    [tags],\n  )\n\n  const tagQueries = useQueries(interestApi.endpoints.readInterest, tagsToFind)\n\n  const fetchedTags = tagQueries\n    .filter(query => query.data)\n    .map(query => query.data)\n    .filter(a => a) as { uri: string; label: string; description: string }[]\n\n  const combinedTags = tags.map(uri => {\n    const tag = fetchedTags.find(i => i.uri === uri) ?? {\n      uri,\n      label: uri.split('/').pop(),\n      description: uri,\n    }\n    return tag\n  })\n\n  return (\n    <div>\n      <ul\n        style={{\n          display: 'flex',\n          listStyleType: 'none',\n          flexWrap: 'wrap',\n          paddingLeft: 0,\n        }}\n      >\n        {combinedTags.map(tag => (\n          <li\n            style={{ margin: '10px' }}\n            key={tag.uri}\n            title={\n              tag.description.slice(0, 300) +\n              (tag.description.length > 300 ? '...' : '')\n            }\n          >\n            <a href={tag.uri}>{tag.label}</a>\n            <button\n              onClick={() => {\n                onRemoveTag(tag.uri)\n              }}\n            >\n              remove\n            </button>\n          </li>\n        ))}\n      </ul>\n      <InterestSearchInput onSelect={tag => onAddTag(tag.uri)} />\n    </div>\n  )\n}\n\nexport default EditableTagList\n","import { FormEventHandler, useState } from 'react'\nimport styles from './DitItemForm.module.scss'\nimport EditableTagList from './EditableTagList'\nimport { DitThing, DitType, Uri } from './types'\n\nconst TYPE_OPTIONS: DitType[] = ['idea', 'problem']\n\ninterface DitThingEmptyOption extends Omit<DitThing, 'type'> {\n  type: DitType | ''\n}\n\ninterface DitItemFormProps {\n  thing: DitThingEmptyOption\n  onSubmit: (data: DitThing) => void\n  disabled?: boolean\n  readonlyUri?: boolean\n}\n\nconst DitItemForm = ({\n  thing,\n  onSubmit,\n  disabled = false,\n  readonlyUri = false,\n}: DitItemFormProps) => {\n  const [type, setType] = useState(thing.type)\n  const [label, setLabel] = useState(thing.label)\n  const [description, setDescription] = useState(thing.description)\n  const [tags, setTags] = useState(thing.tags)\n  const [uri, setUri] = useState(thing.uri)\n\n  const handleAddTag = (tagUri: Uri) => {\n    if (!tags.find(tag => tag === tagUri)) setTags(tags => [...tags, tagUri])\n    else {\n      console.log('tag already in list')\n    }\n  }\n\n  const handleRemoveTag = (tagUri: Uri) => {\n    if (!tags.find(tag => tag === tagUri))\n      throw new Error('tag not in list (should not happen!)')\n\n    setTags(tags => tags.filter(t => t !== tagUri))\n  }\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = e => {\n    e.preventDefault()\n    if (!type) return\n    onSubmit({ type, uri, label, description, tags })\n  }\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <select\n        value={type}\n        defaultValue=\"\"\n        onChange={e => setType(e.target.value as DitType)}\n      >\n        <option disabled value=\"\">\n          {' '}\n          -- select type --{' '}\n        </option>\n        {TYPE_OPTIONS.map(option => (\n          <option key={option}>{option}</option>\n        ))}\n      </select>\n      <input\n        type=\"text\"\n        disabled={readonlyUri}\n        value={uri}\n        onChange={e => setUri(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        value={label}\n        onChange={e => setLabel(e.target.value)}\n      />\n      <textarea\n        value={description}\n        onChange={e => setDescription(e.target.value)}\n        cols={30}\n        rows={10}\n      ></textarea>\n\n      <EditableTagList\n        tags={tags}\n        onAddTag={handleAddTag}\n        onRemoveTag={handleRemoveTag}\n      />\n\n      <input type=\"submit\" value=\"Save\" disabled={disabled} />\n    </form>\n  )\n}\n\nexport default DitItemForm\n","import { Navigate } from 'react-router-dom'\nimport { useAppSelector } from './app/hooks'\nimport { getDitupUri, solidApi } from './app/services/solidApi'\nimport DitItemForm from './DitItemForm'\nimport { selectLogin } from './features/login/loginSlice'\nimport { DitThing } from './types'\n\nconst CreateDit = () => {\n  const webId = useAppSelector(selectLogin).webId\n\n  const [createDit, { isLoading, isSuccess, data }] =\n    solidApi.endpoints.createDit.useMutation()\n\n  if (isSuccess && data)\n    return <Navigate to={`/items/${encodeURIComponent(data)}`} />\n\n  const handleSubmit = (thing: DitThing) => createDit({ webId, thing })\n\n  return (\n    <div>\n      <DitItemForm\n        thing={{\n          type: '',\n          uri: `${getDitupUri(webId)}#${globalThis.crypto.randomUUID()}`,\n          label: '',\n          description: '',\n          tags: [],\n        }}\n        onSubmit={handleSubmit}\n        disabled={isLoading}\n      />\n    </div>\n  )\n}\n\nexport default CreateDit\n","import { FC, useMemo } from 'react'\nimport { interestApi } from './app/services/interestApi'\nimport { useQueries } from './app/services/useQueries'\n\ninterface Props {\n  tags: string[]\n}\n\nconst TagList: FC<Props> = ({ tags }) => {\n  const tagsToFind = useMemo(\n    () => tags.filter(uri => uri.includes('wikidata')),\n    [tags],\n  )\n\n  const tagQueries = useQueries(interestApi.endpoints.readInterest, tagsToFind)\n\n  const fetchedTags = tagQueries\n    .filter(query => query.data)\n    .map(query => query.data)\n    .filter(a => a) as { uri: string; label: string; description: string }[]\n\n  const combinedTags = tags.map(uri => {\n    const tag = fetchedTags.find(i => i.uri === uri) ?? {\n      uri,\n      label: uri.split('/').pop(),\n      description: uri,\n    }\n    return tag\n  })\n\n  return (\n    <div>\n      <ul\n        style={{\n          display: 'flex',\n          listStyleType: 'none',\n          flexWrap: 'wrap',\n          paddingLeft: 0,\n        }}\n      >\n        {combinedTags.map(tag => (\n          <li\n            style={{ margin: '10px' }}\n            key={tag.uri}\n            title={\n              tag.description.slice(0, 300) +\n              (tag.description.length > 300 ? '...' : '')\n            }\n          >\n            <a href={tag.uri}>{tag.label}</a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TagList\n","import TagList from './TagList'\nimport { DitThing } from './types'\nimport { Link } from 'react-router-dom'\n\nconst DitItem = ({ thing }: { thing: DitThing }) => (\n  <div>\n    <header>\n      <span>icon: {thing.type}</span>{' '}\n      <Link to={`/items/${encodeURIComponent(thing.uri)}`}>{thing.label}</Link>{' '}\n      <a href={thing.uri}>link</a>\n    </header>\n    <section>{thing.description}</section>\n    <section>\n      <TagList tags={thing.tags} />\n    </section>\n  </div>\n)\n\nexport default DitItem\n","import { skipToken } from '@reduxjs/toolkit/query'\nimport { Link, Navigate, useParams } from 'react-router-dom'\nimport { solidApi } from './app/services/solidApi'\nimport DitItem from './DitItem'\n\nconst DitItemPage = () => {\n  const { itemUri } = useParams<'itemUri'>()\n\n  const { data, isLoading, isUninitialized } =\n    solidApi.endpoints.readDitItem.useQuery(itemUri ?? skipToken)\n\n  const [removeDit, { isLoading: isRemoving, isSuccess }] =\n    solidApi.endpoints.removeDit.useMutation()\n\n  if (isSuccess) return <Navigate to=\"/\" />\n\n  if (!itemUri) return <>No Content...</>\n  if (isLoading || isUninitialized) return <div>Loading...</div>\n  if (!data) return <div>Not Found</div>\n\n  return (\n    <>\n      <DitItem thing={data} />\n      <aside>\n        <Link to={`/items/${encodeURIComponent(itemUri)}/edit`}>Edit</Link>{' '}\n        <button disabled={isRemoving} onClick={() => removeDit(itemUri)}>\n          DANGER: Remove\n        </button>\n      </aside>\n    </>\n  )\n}\n\nexport default DitItemPage\n","import { skipToken } from '@reduxjs/toolkit/query'\nimport { useAppSelector } from './app/hooks'\nimport { getDitupUri, solidApi } from './app/services/solidApi'\nimport DitItem from './DitItem'\nimport styles from './DitList.module.scss'\nimport { selectLogin } from './features/login/loginSlice'\n\nconst DitList = () => {\n  const { webId } = useAppSelector(selectLogin)\n  const { data, isLoading, isUninitialized } =\n    solidApi.endpoints.readDitItems.useQuery(\n      webId ? getDitupUri(webId) : skipToken,\n    )\n  if (isLoading || isUninitialized || !data) return <div>Loading...</div>\n\n  return (\n    <div>\n      <ul className={styles.list}>\n        {data.map(thing => (\n          <li key={thing.uri}>\n            <DitItem thing={thing} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default DitList\n","export default __webpack_public_path__ + \"static/media/logo-white.d49770e9.svg\";","import { skipToken } from '@reduxjs/toolkit/dist/query'\nimport { Link } from 'react-router-dom'\nimport { useAppDispatch, useAppSelector } from './app/hooks'\nimport { solidApi } from './app/services/solidApi'\nimport { logout, selectLogin } from './features/login/loginSlice'\nimport styles from './Header.module.scss'\nimport logo from './assets/logo-white.svg'\n\nconst Header = () => {\n  const webId = useAppSelector(selectLogin).webId\n  const dispatch = useAppDispatch()\n\n  const { data } = solidApi.endpoints.readPerson.useQuery(webId || skipToken)\n\n  return (\n    <header className={styles.header}>\n      <Link className={styles.homeLink} to=\"/\">\n        <img className={styles.logo} src={logo} alt=\"ditup logo\" /> ditup\n      </Link>\n      <span className={styles.separator} />\n      <Link to=\"/create\">Create</Link>\n      <Link to=\"/people/me\">{!data ? webId : data.name}</Link>\n      <button onClick={() => dispatch(logout())}>log out</button>\n    </header>\n  )\n}\n\nexport default Header\n","import { FormEventHandler, useState } from 'react'\nimport { useAppDispatch } from '../../app/hooks'\nimport { login } from './loginSlice'\n\nconst Login = () => {\n  const [provider, setProvider] = useState('')\n  const dispatch = useAppDispatch()\n  const handleSubmit: FormEventHandler<HTMLFormElement> = async e => {\n    e.preventDefault()\n    dispatch(login(provider))\n  }\n\n  return (\n    <div>\n      <header>Log in with your Solid identity</header>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={provider}\n          onChange={e => setProvider(e.target.value)}\n          list=\"providers\"\n        />\n        <datalist id=\"providers\">\n          <option value=\"https://solidcommunity.net\">Solid Community</option>\n          <option value=\"https://inrupt.net\">Inrupt</option>\n        </datalist>\n        <input type=\"submit\" value=\"Log in\" disabled={!provider} />\n      </form>\n    </div>\n  )\n}\n\nexport default Login\n","export default __webpack_public_path__ + \"static/media/main-image.62fd6594.png\";","import { Link } from 'react-router-dom'\nimport Login from './features/login/Login'\nimport logo from './assets/main-image.png'\nimport styles from './Homepage.module.scss'\n\nconst Homepage = () => (\n  <div className={styles.page}>\n    <div className={styles.wrapper}>\n      <header>\n        <h1>ditup</h1>\n        <p>do it together!</p>\n      </header>\n\n      <img className={styles.homeImage} src={logo} alt=\"mushroom\" />\n\n      <nav>\n        <Login />\n        <Link to=\"/signup\">\n          <small>Get started with Solid?</small>\n        </Link>\n      </nav>\n    </div>\n  </div>\n)\n\nexport default Homepage\n","import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { fetchImage } from './api'\nimport { useAppSelector } from './app/hooks'\nimport { solidApi } from './app/services/solidApi'\nimport EditableTagList from './EditableTagList'\nimport { selectLogin } from './features/login/loginSlice'\nimport logo from './assets/main-image.png'\n\nconst Person = () => {\n  const personId = useParams<'personId'>().personId as string\n  const loginUri = useAppSelector(selectLogin).webId\n  const personUri = personId === 'me' ? loginUri : personId\n  const { data, isLoading } = solidApi.endpoints.readPerson.useQuery(personUri)\n  const [addInterest] = solidApi.endpoints.addInterest.useMutation()\n  const [removeInterest] = solidApi.endpoints.removeInterest.useMutation()\n\n  const [image, setImage] = useState(logo)\n\n  useEffect(() => {\n    ;(async () => {\n      if (data?.photo) {\n        const img = await fetchImage(data.photo)\n        setImage(img)\n      }\n    })()\n  }, [data?.photo])\n\n  if (!data) return <div>Loading...</div>\n\n  return (\n    <div>\n      <img src={image} style={{ width: '10rem' }} />\n      <div>\n        {isLoading ? '...' : data.name ?? ''} <a href={personUri}>link</a>\n      </div>\n      {\n        <EditableTagList\n          tags={data.interests}\n          onAddTag={interest => addInterest({ uri: personUri, interest })}\n          onRemoveTag={interest => removeInterest({ uri: personUri, interest })}\n        />\n      }\n      {\n        <a\n          href={`https://www.interesting.chat/?interests=${encodeURIComponent(\n            data.interests\n              .filter(uri => uri.includes('wikidata'))\n              .map(uri => uri.split('/').pop())\n              .join(','),\n          )}`}\n        >\n          Chat with a stranger about your interests\n        </a>\n      }\n    </div>\n  )\n}\n\nexport default Person\n","const Signup = () => <div>Info how to get started with Solid</div>\n\nexport default Signup\n","import { skipToken } from '@reduxjs/toolkit/query'\nimport { Navigate, useParams } from 'react-router-dom'\nimport { solidApi } from './app/services/solidApi'\nimport DitItemForm from './DitItemForm'\nimport { DitThing } from './types'\n\nconst DitItemFormPage = () => {\n  const { itemUri } = useParams<'itemUri'>()\n\n  const { data, isLoading, isUninitialized } =\n    solidApi.endpoints.readDitItem.useQuery(itemUri ?? skipToken)\n\n  const [updateDit, { isLoading: isUpdating, isSuccess }] =\n    solidApi.endpoints.updateDit.useMutation()\n\n  if (isSuccess && data)\n    return <Navigate to={`/items/${encodeURIComponent(data.uri)}`} />\n\n  if (!itemUri) return <>No Content...</>\n  if (isLoading || isUninitialized) return <div>Loading...</div>\n  if (!data) return <div>Not Found</div>\n\n  const handleSubmit = (thing: DitThing) => updateDit({ thing })\n\n  return (\n    <DitItemForm\n      thing={data}\n      onSubmit={handleSubmit}\n      disabled={isUpdating}\n      readonlyUri\n    />\n  )\n}\n\nexport default DitItemFormPage\n","import { useEffect } from 'react'\nimport { Route, Routes } from 'react-router-dom'\nimport './App.css'\nimport { useAppDispatch, useAppSelector } from './app/hooks'\nimport CreateDit from './CreateDit'\nimport DitItemPage from './DitItemPage'\nimport DitList from './DitList'\nimport { init, selectLogin } from './features/login/loginSlice'\nimport Header from './Header'\nimport Homepage from './Homepage'\nimport Person from './Person'\nimport Signup from './Signup'\nimport EditDitPage from './EditDitPage'\n\nfunction App() {\n  const login = useAppSelector(selectLogin)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(init())\n  }, [dispatch])\n\n  if (login.status === 'loading') return <div>initializing</div>\n\n  if (!login.isLoggedIn)\n    return (\n      <div>\n        <Routes>\n          <Route path=\"/\" element={<Homepage />} />\n          <Route path=\"/signup\" element={<Signup />} />\n        </Routes>\n      </div>\n    )\n  return (\n    <div>\n      <Header />\n      <Routes>\n        <Route path=\"/\" element={<DitList />} />\n        <Route path=\"/people/:personId\" element={<Person />} />\n        <Route path=\"/create\" element={<CreateDit />} />\n        <Route path=\"/items/:itemUri\" element={<DitItemPage />} />\n        <Route path=\"/items/:itemUri/edit\" element={<EditDitPage />} />\n      </Routes>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}