{"version":3,"sources":["HorizontalList.module.scss","Header.module.scss","api.ts","Homepage.module.scss","PersonSummary.module.scss","DitItemForm.module.scss","app/hooks.ts","config.ts","app/services/solidApi.ts","app/services/interestApi.ts","features/login/loginAPI.ts","features/login/loginSlice.ts","app/services/ditapi.ts","app/store.ts","app/services/useQueries.ts","SearchInput.tsx","InterestSearchInput.tsx","EditableTagList.tsx","DitItemForm.tsx","CreateDit.tsx","assets/main-image.png","useLoggedUser.ts","TagList.tsx","PersonSummary.tsx","Discover.tsx","DitItem.tsx","DitItemPage.tsx","DitList.tsx","EditDitPage.tsx","assets/logo-white.svg","Header.tsx","features/login/Login.tsx","Homepage.tsx","Person.tsx","Signup.tsx","TagPage.tsx","usePreviousUriAfterSolidRedirect.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","fetchImage","uri","a","fetch","response","headers","get","Buffer","arrayBuffer","from","toString","image","useAppDispatch","useDispatch","useAppSelector","useSelector","ditUris","idea","problem","indexServers","JSON","parse","process","REACT_APP_INDEX_SERVERS","solidApi","createApi","reducerPath","baseQuery","data","fetchProperties","fetchAll","getSolidDataset","dataset","createSolidDataset","remove","forEach","subject","predicate","object","thing","getThing","changedDataset","removeThing","updatedThing","removeAll","setThing","removeUrl","setString","createThing","url","setStringWithLocale","set","setUrl","add","addUrl","saveSolidDatasetAt","returnThings","getThingAll","filter","returnData","map","returnThing","Object","fromEntries","entries","key","value","getUrlAll","getStringEnglishAll","getStringNoLocaleAll","length","find","error","message","tagTypes","endpoints","build","readPerson","query","name","foaf","photo","vcard","hasPhoto","interests","topic_interest","providesTags","result","type","id","transformResponse","readDitItem","rdf","label","rdfs","description","dc","tags","as","tag","keys","readDitItems","things","includes","results","addInterest","mutation","interest","invalidatesTags","removeInterest","createDit","updateDit","removeDit","getDitupUri","webId","baseUrl","exec","Error","interestApi","fetchBaseQuery","searchInterests","encodeURIComponent","search","concepturi","rest","readInterest","match","wikidataRegex","meta","entity","values","entities","labels","en","descriptions","imageString","claims","P18","p","mainsnak","datavalue","officialWebsite","P856","aliases","login","oidcIssuer","solidLogin","redirectUrl","globalThis","location","href","clientName","init","handleIncomingRedirect","restorePreviousSession","getDefaultSession","info","createAsyncThunk","api","logout","loginSlice","createSlice","initialState","isLoggedIn","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","rejected","action","alert","payload","selectLogin","ditapi","baseSources","sources","sparqlEngine","QueryEngine","queryBindings","bindingsStream","toArray","binding","comunicaBaseQuery","getUser","discoverPeople","userId","person","count","commonCount","store","configureStore","reducer","loginReducer","middleware","getDefaultMiddleware","concat","useQueries","params","useEffect","param","dispatch","initiate","unsubscribe","select","SearchInput","options","isLoading","onChange","onSelect","e","target","option","onClick","InterestSearchInput","useState","setQuery","debouncedQuery","setDebouncedQuery","debouncedSet","useMemo","debounce","useQuery","skipToken","EditableTagList","onAddTag","onRemoveTag","tagsToFind","fetchedTags","combinedTags","i","split","pop","style","display","listStyleType","flexWrap","paddingLeft","margin","title","slice","to","TYPE_OPTIONS","DitItemForm","onSubmit","disabled","readonlyUri","setType","setLabel","setDescription","setTags","setUri","className","styles","form","preventDefault","defaultValue","cols","rows","tagUri","console","log","t","CreateDit","useMutation","isSuccess","crypto","randomUUID","useLoggedUser","TagList","me","highlightedTags","listStyles","horizontalList","color","undefined","PersonSummary","logo","setImage","img","container","avatar","src","Discover","discoveredPeople","discoveredPeopleUris","personQueries","peopleInCommon","countMatch","sort","b","isUninitialized","Math","round","common","intersection","DitItem","DitItemPage","itemUri","useParams","isRemoving","DitList","DitItemFormPage","isUpdating","Header","header","homeLink","alt","separator","Login","provider","setProvider","handleSubmit","list","Homepage","page","wrapper","homeImage","Person","personId","loginUri","personUri","width","join","Signup","TagPage","float","maxWidth","backgroundColor","usePreviousUriAfterSolidRedirect","navigate","useNavigate","onSessionRestore","URL","pathname","App","usePreviousUri","path","element","EditDitPage","Boolean","window","hostname","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.92d3186b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"horizontalList\":\"HorizontalList_horizontalList__1L95r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__34Mnk\",\"homeLink\":\"Header_homeLink__2Plqh\",\"logo\":\"Header_logo__3Vr_I\",\"separator\":\"Header_separator__jCo-_\"};","import { fetch } from '@inrupt/solid-client-authn-browser'\n\nexport const fetchImage = async (uri: string): Promise<string> => {\n  const response = await fetch(uri)\n\n  const image = `data:${response.headers.get(\n    'content-type',\n  )};base64,${Buffer.from(await response.arrayBuffer()).toString('base64')}`\n  return image\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Homepage_page__3ASb0\",\"wrapper\":\"Homepage_wrapper__yr9nO\",\"homeImage\":\"Homepage_homeImage__1og7O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PersonSummary_container__niwwK\",\"avatar\":\"PersonSummary_avatar__1cKL_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"DitItemForm_form__PfJgE\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","export const ditUris = {\n  idea: 'https://ditup.example#Idea' as const,\n  problem: 'https://ditup.example#Problem' as const,\n} as const\n\nexport const indexServers: readonly string[] = JSON.parse(\n  process.env.REACT_APP_INDEX_SERVERS || '[]',\n)\n","// Need to use the React-specific entry point to import createApi\nimport {\n  addUrl,\n  createSolidDataset,\n  createThing,\n  getSolidDataset,\n  getStringEnglishAll,\n  getStringNoLocaleAll,\n  getThing,\n  getThingAll,\n  getUrlAll,\n  removeAll,\n  removeThing,\n  removeUrl,\n  saveSolidDatasetAt,\n  setStringWithLocale,\n  setThing,\n  setUrl,\n  SolidDataset,\n  ThingPersisted,\n  WithChangeLog,\n} from '@inrupt/solid-client'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport { BaseQueryFn, createApi } from '@reduxjs/toolkit/query/react'\nimport { as, dc, foaf, rdf, rdfs, vcard } from 'rdf-namespaces'\nimport { ditUris } from '../../config'\nimport { DitThing, DitType, Person, Uri } from '../../types'\n\ntype Triple = [string, string, string]\n\ntype MutationData = {\n  add?: Triple[]\n  set?: Triple[]\n  remove?: Triple[]\n  setString?: Triple[] // TODO think about language strings\n}\n\ntype FetchShape = {\n  [key: string]: string\n}\n\ntype QueryResponse = {\n  [key: string]: string[]\n  uri: string[] /* this fixes an annoying TS error */\n}\n\ninterface QueryParams {\n  uri: string\n  fetchProperties: FetchShape\n  data?: MutationData\n  fetchAll?: boolean\n}\n\nconst solidQuery =\n  (): BaseQueryFn<QueryParams, QueryResponse[], { message: string }> =>\n  async ({ uri, data, fetchProperties, fetchAll = false }: QueryParams) => {\n    let dataset: SolidDataset\n    try {\n      dataset = await getSolidDataset(uri, { fetch })\n    } catch (e) {\n      dataset = createSolidDataset()\n    }\n\n    let changedDataset: (SolidDataset & WithChangeLog) | undefined\n\n    if (data?.remove)\n      data.remove.forEach(([subject, predicate, object]) => {\n        const thing = getThing(changedDataset ?? dataset, subject)\n        if (thing) {\n          if (predicate === '*') {\n            changedDataset = removeThing(changedDataset ?? dataset, thing)\n          } else if (object === '*') {\n            const updatedThing = removeAll(thing, predicate)\n            changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n          } else {\n            const updatedThing = removeUrl(thing, predicate, object)\n            changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n          }\n        }\n      })\n\n    if (data?.setString)\n      data.setString.forEach(([subject, predicate, object]) => {\n        const thing =\n          getThing(changedDataset ?? dataset, subject) ??\n          createThing({ url: subject })\n        if (thing) {\n          const updatedThing = setStringWithLocale(\n            thing,\n            predicate,\n            object,\n            'en',\n          )\n          changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n        }\n      })\n\n    if (data?.set)\n      data.set.forEach(([subject, predicate, object]) => {\n        const thing =\n          getThing(changedDataset ?? dataset, subject) ??\n          createThing({ url: subject })\n        if (thing) {\n          const updatedThing = setUrl(thing, predicate, object)\n          changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n        }\n      })\n\n    if (data?.add)\n      data.add.forEach(([subject, predicate, object]) => {\n        const thing =\n          getThing(changedDataset ?? dataset, subject) ??\n          createThing({ url: subject })\n\n        const updatedThing = addUrl(thing, predicate, object)\n        changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n      })\n\n    if (changedDataset) {\n      await saveSolidDatasetAt(uri, changedDataset, { fetch })\n    }\n\n    let returnThings: ThingPersisted[]\n    if (!fetchAll) {\n      returnThings = [getThing(changedDataset ?? dataset, uri)].filter(\n        a => !!a,\n      ) as ThingPersisted[]\n    } else {\n      returnThings = getThingAll(changedDataset ?? dataset)\n    }\n\n    const returnData = returnThings.map(returnThing => ({\n      ...Object.fromEntries(\n        Object.entries(fetchProperties).map(([key, value]) => [\n          key,\n          [\n            ...getUrlAll(returnThing, value),\n            ...getStringEnglishAll(returnThing, value),\n            ...getStringNoLocaleAll(returnThing, value),\n          ],\n        ]),\n      ),\n      uri: [returnThing.url],\n    }))\n\n    if (\n      !fetchAll &&\n      returnData.length === 0 &&\n      // also don't error when mutation removed the whole thing\n      !(data?.remove ?? []).find(([, predicate]) => predicate === '*')\n    )\n      return {\n        error: { message: 'thing not found' },\n      }\n\n    return {\n      data: returnData,\n    }\n  }\n\n// Define a service using a base URL and expected endpoints\nexport const solidApi = createApi({\n  reducerPath: 'solidapi',\n  baseQuery: solidQuery(),\n  tagTypes: ['Person', 'DitThing'],\n  endpoints: build => ({\n    readPerson: build.query<Person, string>({\n      query: uri => ({\n        uri,\n        fetchProperties: {\n          name: foaf.name,\n          photo: vcard.hasPhoto,\n          interests: foaf.topic_interest,\n        },\n      }),\n      providesTags: (result, error, uri) => [{ type: 'Person', id: uri }],\n      transformResponse: ([{ uri, name, photo, interests }]) => ({\n        uri: uri[0],\n        name: name[0] ?? '',\n        photo: photo[0] ?? '',\n        interests,\n      }),\n    }),\n    readDitItem: build.query<DitThing, Uri>({\n      query: uri => ({\n        uri,\n        fetchProperties: {\n          type: rdf.type,\n          label: rdfs.label,\n          description: dc.description,\n          tags: as.tag,\n        },\n      }),\n      transformResponse: ([{ uri, type, label, description, tags }]) => ({\n        uri: uri[0],\n        type:\n          (Object.keys(ditUris) as DitType[]).find(\n            key => ditUris[key] === type[0],\n          ) ?? 'idea',\n        label: label[0],\n        description: description[0],\n        tags,\n      }),\n      providesTags: (result, error, uri) => [{ type: 'DitThing', id: uri }],\n    }),\n    readDitItems: build.query<DitThing[], Uri>({\n      query: uri => ({\n        uri,\n        fetchAll: true,\n        fetchProperties: {\n          type: rdf.type,\n          label: rdfs.label,\n          description: dc.description,\n          tags: as.tag,\n        },\n      }),\n      transformResponse: things => {\n        return things\n          .map(({ uri, type, label, description, tags }) => ({\n            uri: uri[0],\n            type: (Object.keys(ditUris) as DitType[]).find(key =>\n              type.includes(ditUris[key]),\n            ),\n            label: label[0],\n            description: description[0],\n            tags,\n          }))\n          .filter(thing => typeof thing.type !== 'undefined') as DitThing[]\n      },\n      providesTags: results =>\n        (results ?? []).map(result => ({ type: 'DitThing', id: result.uri })),\n    }),\n    addInterest: build.mutation<\n      { interests: string[] },\n      { uri: string; interest: string }\n    >({\n      query: ({ uri, interest }) => ({\n        uri,\n        data: {\n          add: [[uri, foaf.topic_interest, interest]],\n        },\n        fetchProperties: { interests: foaf.topic_interest },\n      }),\n      invalidatesTags: (result, error, { uri }) => [\n        { type: 'Person', id: uri },\n      ],\n    }),\n    removeInterest: build.mutation<\n      { interests: string[] },\n      { uri: string; interest: string }\n    >({\n      query: ({ uri, interest }) => ({\n        uri,\n        data: { remove: [[uri, foaf.topic_interest, interest]] },\n        fetchProperties: { interests: foaf.topic_interest },\n      }),\n      invalidatesTags: (result, error, { uri }) => [\n        { type: 'Person', id: uri },\n      ],\n    }),\n    createDit: build.mutation<Uri, { webId: Uri; thing: DitThing }>({\n      query: ({ thing }) => ({\n        uri: thing.uri,\n        data: {\n          add: [\n            [thing.uri, rdf.type, ditUris[thing.type]],\n            ...thing.tags.map(tag => [thing.uri, as.tag, tag] as Triple),\n          ],\n          setString: [\n            [thing.uri, rdfs.label, thing.label],\n            [thing.uri, dc.description, thing.description],\n          ],\n        },\n        fetchProperties: {},\n      }),\n      transformResponse: ([\n        {\n          uri: [uri],\n        },\n      ]) => uri,\n    }),\n    updateDit: build.mutation<Uri, { thing: DitThing }>({\n      query: ({ thing }) => ({\n        uri: thing.uri,\n        data: {\n          set: [[thing.uri, rdf.type, ditUris[thing.type]]],\n          remove: [[thing.uri, as.tag, '*']],\n          add: thing.tags.map(tag => [thing.uri, as.tag, tag] as Triple),\n          setString: [\n            [thing.uri, rdfs.label, thing.label],\n            [thing.uri, dc.description, thing.description],\n          ],\n        },\n        fetchProperties: {},\n      }),\n      transformResponse: ([\n        {\n          uri: [uri],\n        },\n      ]) => uri,\n      invalidatesTags: (result, error, { thing }) => [\n        { type: 'DitThing', id: thing.uri },\n      ],\n    }),\n    removeDit: build.mutation<unknown, Uri>({\n      query: uri => ({\n        uri,\n        data: {\n          remove: [[uri, '*', '*']],\n        },\n        fetchProperties: {},\n      }),\n      invalidatesTags: (result, error, uri) => [{ type: 'DitThing', id: uri }],\n    }),\n  }),\n})\n\nexport const getDitupUri = (webId: string) => {\n  const baseUrl = /^(https?:\\/\\/.*)\\/profile\\/card#me$/g.exec(webId)?.[1]\n  if (!baseUrl) throw new Error('unable to generate hospex uri from webId')\n  return baseUrl + '/public/ditup.ttl'\n}\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { Interest } from '../../types'\n\nexport const interestApi = createApi({\n  reducerPath: 'interestapi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://www.wikidata.org/w/',\n  }),\n  tagTypes: ['Interest'],\n  endpoints: build => ({\n    searchInterests: build.query<Interest[], string>({\n      query: query => ({\n        url: `api.php?action=wbsearchentities&search=${encodeURIComponent(\n          query,\n        )}&language=en&limit=20&continue=0&format=json&uselang=en&type=item&origin=*`,\n      }),\n      // Pick out data and prevent nested properties in a hook or selector\n      transformResponse: (response: {\n        search: {\n          concepturi: string\n          label: string\n          description: string\n          photos: []\n          aliases: []\n        }[]\n      }) =>\n        response.search.map(({ concepturi, ...rest }) => ({\n          uri: concepturi,\n          ...rest,\n        })),\n      //*/\n      providesTags: (result, error, query) => [\n        { type: 'Interest', id: 'QUERY_STRING_' + query },\n      ],\n    }),\n    readInterest: build.query<Interest, string>({\n      query: uri => {\n        const id = uri.match(wikidataRegex)?.[2] ?? ''\n        return {\n          url: `api.php?action=wbgetentities&ids=${id}&languages=en&format=json&origin=*`,\n        }\n      },\n      transformResponse: (response: GetEntitiesResponse, meta, uri) => {\n        const entity = Object.values(response.entities)[0]\n        if (!entity) throw new Error('entity not found')\n\n        const label = entity.labels.en?.value ?? ''\n        const description = entity.descriptions.en?.value ?? ''\n        const imageString = (entity.claims.P18 ?? []).map(\n          p => p.mainsnak.datavalue.value,\n        )[0]\n        const image =\n          imageString &&\n          `https://commons.wikimedia.org/wiki/Special:FilePath/${encodeURIComponent(\n            imageString,\n          )}?width=300`\n        const officialWebsite = (entity.claims.P856 ?? []).map(\n          p => p.mainsnak.datavalue.value,\n        )[0]\n        const aliases = (entity.aliases.en ?? []).map(({ value }) => value)\n\n        return {\n          uri,\n          label,\n          aliases,\n          description,\n          officialWebsite,\n          image,\n        }\n      },\n      providesTags: (result, error, uri) => [{ type: 'Interest', id: uri }],\n    }),\n  }),\n})\n\nconst wikidataRegex =\n  /^https?:\\/\\/(w{3}\\.)?wikidata\\.org\\/entity\\/([A-Z0-9]*)\\/?$/\n/*\nexport const getInterest = async (uri: string): Promise<Interest> => {\n  const wikidataId = uri.match(wikidataRegex)?.[2] ?? ''\n  const dbpediaId = uri.match(dbpediaRegex)?.[2] ?? ''\n  const dataUri = wikidataId\n    ? `https://www.wikidata.org/wiki/Special:EntityData/${wikidataId}.ttl`\n    : dbpediaId\n    ? `https://dbpedia.org/data/${dbpediaId}.ttl`\n    : uri\n  const rawData = await (await fetchTurtle(dataUri)).text()\n  return await parseInterest(rawData, uri)\n}*/\n\ninterface GetEntitiesResponse {\n  entities: {\n    [key: string]: {\n      labels: { en?: { value: string } }\n      descriptions: { en?: { value: string } }\n      aliases: { en?: { value: string }[] }\n      claims: {\n        P18?: {\n          mainsnak: {\n            datavalue: { value: string }\n            datatype: 'commonsMedia'\n          }\n        }[]\n        P856?: {\n          mainsnak: {\n            datavalue: { value: string }\n            datatype: 'url'\n          }\n        }[]\n      }\n    }\n  }\n}\n","import {\n  handleIncomingRedirect,\n  getDefaultSession,\n  login as solidLogin,\n} from '@inrupt/solid-client-authn-browser'\n\nexport const login = async (oidcIssuer: string) =>\n  await solidLogin({\n    oidcIssuer,\n    redirectUrl: globalThis.location.href,\n    clientName: 'ditup',\n  })\n\nexport const init = async () => {\n  await handleIncomingRedirect({\n    url: globalThis.location.href,\n    restorePreviousSession: true,\n  })\n\n  return getDefaultSession().info\n}\n\nexport { logout } from '@inrupt/solid-client-authn-browser'\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport * as api from './loginAPI'\n\nexport interface LoginState {\n  webId: string\n  isLoggedIn: boolean\n  status: 'idle' | 'loading' | 'failed'\n}\n\nconst initialState: LoginState = {\n  webId: '',\n  isLoggedIn: false,\n  status: 'loading',\n}\n\nexport const login = createAsyncThunk('login/login', api.login)\nexport const init = createAsyncThunk('login/init', api.init)\nexport const logout = createAsyncThunk('login/logout', api.logout)\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder\n      .addCase(login.pending, state => {\n        state.status = 'loading'\n      })\n      .addCase(login.fulfilled, state => {\n        state.status = 'idle'\n        state.isLoggedIn = true\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.status = 'failed'\n        alert(action.error.message)\n      })\n      .addCase(init.pending, state => {\n        state.status = 'loading'\n      })\n      .addCase(init.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.isLoggedIn = action.payload.isLoggedIn\n        state.webId = action.payload?.webId ?? ''\n      })\n      .addCase(logout.fulfilled, state => {\n        state.status = 'idle'\n        state.isLoggedIn = false\n        state.webId = ''\n      })\n  },\n})\n\nexport const selectLogin = (state: RootState) => state.login\n\nexport default loginSlice.reducer\n","import { QueryEngine } from '@comunica/query-sparql/lib/index-browser'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport { QueryReturnValue } from '@reduxjs/toolkit/dist/query/baseQueryTypes'\nimport { createApi } from '@reduxjs/toolkit/query/react'\nimport { useMemo } from 'react'\nimport { indexServers } from '../../config'\nimport useQuery from '../../useQuery'\n\ntype User = {\n  name: string\n  photo: string\n}\n\nconst comunicaBaseQuery =\n  ({ baseSources }: { baseSources: string[] } = { baseSources: [] }) =>\n  async <ResponseType extends Record<string, string | null>>({\n    query,\n    sources,\n  }: {\n    query: string\n    sources: string[]\n  }): Promise<\n    QueryReturnValue<ResponseType[], unknown, Record<string, unknown>>\n  > => {\n    const sparqlEngine = new QueryEngine()\n\n    const bindingsStream = await sparqlEngine.queryBindings(query, {\n      sources: [...baseSources, ...sources] as [string, ...string[]],\n      fetch,\n    })\n    return {\n      data: (await bindingsStream.toArray()).map(binding => {\n        const keys = [...binding.keys()].map(\n          ({ value }) => value as keyof ResponseType,\n        )\n\n        return Object.fromEntries(\n          keys.map(key => [key, binding.get(key as string)?.value ?? null]),\n        ) as ResponseType\n      }),\n    }\n  }\n\nexport const ditapi = createApi({\n  reducerPath: 'ditapi',\n  baseQuery: comunicaBaseQuery(),\n  endpoints: builder => ({\n    getUser: builder.query<User, string>({\n      query: (webId: string) => ({\n        query: `\n          PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n          PREFIX vcard: <http://www.w3.org/2006/vcard/ns#>\n          SELECT ?name ?photo WHERE {\n            <${webId}> foaf:name ?name.\n            OPTIONAL {<${webId}> vcard:hasPhoto ?photo.}\n          }`,\n        sources: [webId],\n      }),\n      transformResponse: (data: User[]) => data[0],\n    }),\n    discoverPeople: builder.query<{ uri: string; count: number }[], string>({\n      query: (userId: string) => ({\n        query: `\n          PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n          PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n          PREFIX owl: <http://www.w3.org/2002/07/owl#>\n          PREFIX dbo: <http://dbpedia.org/ontology/>\n          SELECT DISTINCT ?person (COUNT(DISTINCT ?thing) as ?commonCount)\n          WHERE {\n            <${userId}> foaf:topic_interest ?thing.\n            ?person foaf:topic_interest ?thing.\n            FILTER(?person != <${userId}>)\n          }\n          GROUP BY ?person`,\n        sources: [userId, ...indexServers],\n      }),\n      transformResponse: (data: { person: string; commonCount: string }[]) =>\n        data.map(({ person, commonCount }) => ({\n          uri: person,\n          count: +commonCount,\n        })),\n    }),\n  }),\n})\n\nexport const useGetUserInterests = (userId: string) => {\n  const query = useMemo(\n    () =>\n      `\n  PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n  PREFIX owl: <http://www.w3.org/2002/07/owl#>\n  PREFIX dbo: <http://dbpedia.org/ontology/>\n  SELECT DISTINCT ?uri ?label ?description\n  WHERE {\n    {\n      <${userId}> foaf:topic_interest ?uri.\n      ?uri rdfs:label ?label.\n      ?uri dbo:abstract ?description.\n    }\n    UNION {\n      <${userId}> foaf:topic_interest ?uri.\n      ?oneUri owl:sameAs ?uri.\n      ?oneUri rdfs:label ?label.\n      ?oneUri dbo:abstract ?description.\n    }\n    FILTER(lang(?label)='en')\n    FILTER(lang(?description)='en')\n  }`,\n    [userId],\n  )\n  const sources: [string, ...string[]] = useMemo(\n    () => [\n      userId,\n      // 'https://query.wikidata.org/sparql',\n      'https://query.wikidata.org/bigdata/ldf',\n      'https://fragments.dbpedia.org/2016-04/en',\n    ],\n    [userId],\n  )\n\n  const [errors, data, isLoading] = useQuery<{\n    uri: string\n    label: string\n    description: string\n  }>(query, sources)\n  return { errors, data, isLoading }\n}\n\nexport const useDiscoverPeople = (userId: string) => {\n  const query = useMemo(\n    () =>\n      `\n  PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n  PREFIX owl: <http://www.w3.org/2002/07/owl#>\n  PREFIX dbo: <http://dbpedia.org/ontology/>\n  SELECT DISTINCT ?person (COUNT(DISTINCT ?thing) as ?commonCount)\n  WHERE {\n    <${userId}> foaf:topic_interest ?thing.\n    ?person foaf:topic_interest ?thing.\n    FILTER(?person != <${userId}>)\n  }\n  GROUP BY ?person\n  `,\n    [userId],\n  )\n  const sources: [string, ...string[]] = useMemo(\n    () => [userId, ...indexServers],\n    [userId],\n  )\n\n  const [errors, data, isLoading] = useQuery<{\n    person: string\n    commonCount: string\n  }>(query, sources)\n  return { errors, data, isLoading }\n}\n\n/*import { createApi, BaseQueryFn } from '@reduxjs/toolkit/query'\nimport axios, { AxiosRequestConfig, AxiosError } from 'axios'\n\nconst axiosBaseQuery =\n  (\n    { baseUrl }: { baseUrl: string } = { baseUrl: '' }\n  ): BaseQueryFn<\n    {\n      url: string\n      method: AxiosRequestConfig['method']\n      data?: AxiosRequestConfig['data']\n      params?: AxiosRequestConfig['params']\n    },\n    unknown,\n    unknown\n  > =>\n  async ({ url, method, data, params }) => {\n    try {\n      const result = await axios({ url: baseUrl + url, method, data, params })\n      return { data: result.data }\n    } catch (axiosError) {\n      let err = axiosError as AxiosError\n      return {\n        error: {\n          status: err.response?.status,\n          data: err.response?.data || err.message,\n        },\n      }\n    }\n  }\n\nconst api = createApi({\n  baseQuery: axiosBaseQuery({\n    baseUrl: 'https://example.com',\n  }),\n  endpoints(build) {\n    return {\n      query: build.query({ query: () => ({ url: '/query', method: 'get' }) }),\n      mutation: build.mutation({\n        query: () => ({ url: '/mutation', method: 'post' }),\n      }),\n    }\n  },\n})*/\n/*\nconst bindingsStream = await myEngine.queryBindings(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n});\n\n// Consume results as a stream (best performance)\nbindingsStream.on('data', (binding) => {\n    console.log(binding.toString()); // Quick way to print bindings for testing\n\n    console.log(binding.has('s')); // Will be true\n\n    // Obtaining values\n    console.log(binding.get('s').value);\n    console.log(binding.get('s').termType);\n    console.log(binding.get('p').value);\n    console.log(binding.get('o').value);\n});\nbindingsStream.on('end', () => {\n    // The data-listener will not be called anymore once we get here.\n});\nbindingsStream.on('error', (error) => {\n    console.error(error);\n});\n\n// Consume results as an array (easier)\nconst bindings = await bindingsStream.toArray();\nconsole.log(bindings[0].get('s').value);\nconsole.log(bindings[0].get('s').termType);\n*/\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport loginReducer from '../features/login/loginSlice'\nimport { ditapi } from './services/ditapi'\nimport { solidApi } from './services/solidApi'\nimport { interestApi } from './services/interestApi'\n\nexport const store = configureStore({\n  reducer: {\n    login: loginReducer,\n    [ditapi.reducerPath]: ditapi.reducer,\n    [solidApi.reducerPath]: solidApi.reducer,\n    [interestApi.reducerPath]: interestApi.reducer,\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware()\n      .concat(ditapi.middleware)\n      .concat(solidApi.middleware)\n      .concat(interestApi.middleware),\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// https://github.com/reduxjs/redux-toolkit/discussions/1171#discussioncomment-2554980\n\nimport {\n  QueryDefinition,\n  EndpointDefinitions,\n} from '@reduxjs/toolkit/query/react'\n\nimport { ApiEndpointQuery } from '@reduxjs/toolkit/dist/query/core/module'\nimport { useEffect } from 'react'\nimport { QueryActionCreatorResult } from '@reduxjs/toolkit/dist/query/core/buildInitiate'\nimport { useSelector } from 'react-redux'\nimport { store } from '../store'\n\n/**\n * Allows running a query on a collection of data\n * @param query The RTK ApiEndpointQuery to run\n * @param params a list of params that will be run by the query\n * @returns the rtk query result (same as useGetXQuery())\n */\nexport function useQueries<\n  Q extends QueryDefinition<any, any, any, any>,\n  D extends EndpointDefinitions,\n>(\n  query: ApiEndpointQuery<Q, D>,\n  params: Parameters<typeof query['initiate']>[0][],\n) {\n  useEffect(() => {\n    const results: QueryActionCreatorResult<any>[] = params.map(param =>\n      store.dispatch(query.initiate(param as any)),\n    )\n    return () => {\n      for (const result of results) {\n        result.unsubscribe()\n      }\n    }\n  }, [query, params])\n  return useSelector(state =>\n    params.map(param => query.select(param)(state as any)),\n  )\n}\n","const SearchInput = ({\n  value,\n  options,\n  isLoading,\n  onChange,\n  onSelect,\n}: {\n  value: string\n  options: { label: string; value: string }[]\n  isLoading: boolean\n  onChange: (value: string) => void\n  onSelect: (value: string) => void\n}) => {\n  return (\n    <>\n      <input value={value} onChange={e => onChange(e.target.value)} />\n      {isLoading && 'searching'}\n      <ul>\n        {options.map(option => (\n          <li key={option.value}>\n            <button onClick={() => onSelect(option.value)}>\n              {option.label}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default SearchInput\n","import { useEffect, useMemo, useState } from 'react'\nimport { interestApi } from './app/services/interestApi'\nimport SearchInput from './SearchInput'\nimport { skipToken } from '@reduxjs/toolkit/query/react'\nimport debounce from 'lodash.debounce'\nimport { Interest } from './types'\n\nconst InterestSearchInput = ({\n  onSelect,\n}: {\n  onSelect: (interest: Interest) => void\n}) => {\n  const [query, setQuery] = useState('')\n\n  const [debouncedQuery, setDebouncedQuery] = useState('')\n\n  const debouncedSet = useMemo(() => debounce(setDebouncedQuery, 500), [])\n\n  useEffect(() => {\n    debouncedSet(query)\n  }, [query, debouncedSet])\n\n  const { data: interests, isLoading } =\n    interestApi.endpoints.searchInterests.useQuery(debouncedQuery || skipToken)\n\n  const handleSelect = (uri: string) => {\n    const interest = (interests ?? []).find(interest => interest.uri === uri)\n    if (!interest) throw new Error('this is a glitch')\n    onSelect(interest)\n    setQuery('')\n  }\n  return (\n    <SearchInput\n      value={query}\n      options={((query && interests) || []).map(\n        ({ label, description, uri }) => ({\n          label: `${label}: ${description}`,\n          value: uri,\n        }),\n      )}\n      isLoading={isLoading}\n      onChange={setQuery}\n      onSelect={handleSelect}\n    />\n  )\n}\n\nexport default InterestSearchInput\n","import { FC, useMemo } from 'react'\nimport { Link } from 'react-router-dom'\nimport { interestApi } from './app/services/interestApi'\nimport { useQueries } from './app/services/useQueries'\nimport InterestSearchInput from './InterestSearchInput'\n\ninterface Props {\n  tags: string[]\n  onAddTag: (tag: string) => void\n  onRemoveTag: (tag: string) => void\n}\n\nconst EditableTagList: FC<Props> = ({ tags, onAddTag, onRemoveTag }) => {\n  const tagsToFind = useMemo(\n    () => tags.filter(uri => uri.includes('wikidata')),\n    [tags],\n  )\n\n  const tagQueries = useQueries(interestApi.endpoints.readInterest, tagsToFind)\n\n  const fetchedTags = tagQueries\n    .filter(query => query.data)\n    .map(query => query.data)\n    .filter(a => a) as { uri: string; label: string; description: string }[]\n\n  const combinedTags = tags.map(uri => {\n    const tag = fetchedTags.find(i => i.uri === uri) ?? {\n      uri,\n      label: uri.split('/').pop(),\n      description: uri,\n    }\n    return tag\n  })\n\n  return (\n    <div>\n      <ul\n        style={{\n          display: 'flex',\n          listStyleType: 'none',\n          flexWrap: 'wrap',\n          paddingLeft: 0,\n        }}\n      >\n        {combinedTags.map(tag => (\n          <li\n            style={{ margin: '10px' }}\n            key={tag.uri}\n            title={\n              tag.description.slice(0, 300) +\n              (tag.description.length > 300 ? '...' : '')\n            }\n          >\n            <Link to={`/tags/${encodeURIComponent(tag.uri)}`}>{tag.label}</Link>\n            <button\n              onClick={() => {\n                onRemoveTag(tag.uri)\n              }}\n            >\n              remove\n            </button>\n          </li>\n        ))}\n      </ul>\n      <InterestSearchInput onSelect={tag => onAddTag(tag.uri)} />\n    </div>\n  )\n}\n\nexport default EditableTagList\n","import { FormEventHandler, useState } from 'react'\nimport styles from './DitItemForm.module.scss'\nimport EditableTagList from './EditableTagList'\nimport { DitThing, DitType, Uri } from './types'\n\nconst TYPE_OPTIONS: DitType[] = ['idea', 'problem']\n\ninterface DitThingEmptyOption extends Omit<DitThing, 'type'> {\n  type: DitType | ''\n}\n\ninterface DitItemFormProps {\n  thing: DitThingEmptyOption\n  onSubmit: (data: DitThing) => void\n  disabled?: boolean\n  readonlyUri?: boolean\n}\n\nconst DitItemForm = ({\n  thing,\n  onSubmit,\n  disabled = false,\n  readonlyUri = false,\n}: DitItemFormProps) => {\n  const [type, setType] = useState(thing.type)\n  const [label, setLabel] = useState(thing.label)\n  const [description, setDescription] = useState(thing.description)\n  const [tags, setTags] = useState(thing.tags)\n  const [uri, setUri] = useState(thing.uri)\n\n  const handleAddTag = (tagUri: Uri) => {\n    if (!tags.find(tag => tag === tagUri)) setTags(tags => [...tags, tagUri])\n    else {\n      console.log('tag already in list')\n    }\n  }\n\n  const handleRemoveTag = (tagUri: Uri) => {\n    if (!tags.find(tag => tag === tagUri))\n      throw new Error('tag not in list (should not happen!)')\n\n    setTags(tags => tags.filter(t => t !== tagUri))\n  }\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = e => {\n    e.preventDefault()\n    if (!type) return\n    onSubmit({ type, uri, label, description, tags })\n  }\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <select\n        value={type}\n        defaultValue=\"\"\n        onChange={e => setType(e.target.value as DitType)}\n      >\n        <option disabled value=\"\">\n          {' '}\n          -- select type --{' '}\n        </option>\n        {TYPE_OPTIONS.map(option => (\n          <option key={option}>{option}</option>\n        ))}\n      </select>\n      <input\n        type=\"text\"\n        disabled={readonlyUri}\n        value={uri}\n        onChange={e => setUri(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        value={label}\n        onChange={e => setLabel(e.target.value)}\n      />\n      <textarea\n        value={description}\n        onChange={e => setDescription(e.target.value)}\n        cols={30}\n        rows={10}\n      ></textarea>\n\n      <EditableTagList\n        tags={tags}\n        onAddTag={handleAddTag}\n        onRemoveTag={handleRemoveTag}\n      />\n\n      <input type=\"submit\" value=\"Save\" disabled={disabled} />\n    </form>\n  )\n}\n\nexport default DitItemForm\n","import { Navigate } from 'react-router-dom'\nimport { useAppSelector } from './app/hooks'\nimport { getDitupUri, solidApi } from './app/services/solidApi'\nimport DitItemForm from './DitItemForm'\nimport { selectLogin } from './features/login/loginSlice'\nimport { DitThing } from './types'\n\nconst CreateDit = () => {\n  const webId = useAppSelector(selectLogin).webId\n\n  const [createDit, { isLoading, isSuccess, data }] =\n    solidApi.endpoints.createDit.useMutation()\n\n  if (isSuccess && data)\n    return <Navigate to={`/items/${encodeURIComponent(data)}`} />\n\n  const handleSubmit = (thing: DitThing) => createDit({ webId, thing })\n\n  return (\n    <div>\n      <DitItemForm\n        thing={{\n          type: '',\n          uri: `${getDitupUri(webId)}#${globalThis.crypto.randomUUID()}`,\n          label: '',\n          description: '',\n          tags: [],\n        }}\n        onSubmit={handleSubmit}\n        disabled={isLoading}\n      />\n    </div>\n  )\n}\n\nexport default CreateDit\n","export default __webpack_public_path__ + \"static/media/main-image.62fd6594.png\";","import { solidApi } from './app/services/solidApi'\nimport { useAppSelector } from './app/hooks'\nimport { selectLogin } from './features/login/loginSlice'\nimport { skipToken } from '@reduxjs/toolkit/dist/query'\n\nconst useLoggedUser = () => {\n  const webId = useAppSelector(selectLogin).webId\n  const { data: me } = solidApi.endpoints.readPerson.useQuery(\n    webId || skipToken,\n  )\n  return me\n}\n\nexport default useLoggedUser\n","import { FC, useMemo } from 'react'\nimport { interestApi } from './app/services/interestApi'\nimport { useQueries } from './app/services/useQueries'\nimport useLoggedUser from './useLoggedUser'\nimport listStyles from './HorizontalList.module.scss'\nimport { Link } from 'react-router-dom'\n\ninterface Props {\n  tags: string[]\n}\n\nconst TagList: FC<Props> = ({ tags }) => {\n  const tagsToFind = useMemo(\n    () => tags.filter(uri => uri.includes('wikidata')),\n    [tags],\n  )\n\n  const me = useLoggedUser()\n  const highlightedTags = me?.interests ?? []\n\n  const tagQueries = useQueries(interestApi.endpoints.readInterest, tagsToFind)\n\n  const fetchedTags = tagQueries\n    .filter(query => query.data)\n    .map(query => query.data)\n    .filter(a => a) as { uri: string; label: string; description: string }[]\n\n  const combinedTags = tags.map(uri => {\n    const tag = fetchedTags.find(i => i.uri === uri) ?? {\n      uri,\n      label: uri.split('/').pop(),\n      description: uri,\n    }\n    return tag\n  })\n\n  return (\n    <ul className={listStyles.horizontalList}>\n      {combinedTags.map(tag => (\n        <li\n          key={tag.uri}\n          title={\n            tag.description.slice(0, 300) +\n            (tag.description.length > 300 ? '...' : '')\n          }\n        >\n          <Link\n            style={{\n              color: highlightedTags.includes(tag.uri) ? 'red' : undefined,\n            }}\n            to={`/tags/${encodeURIComponent(tag.uri)}`}\n          >\n            {tag.label}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default TagList\n","import { FC, useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { fetchImage } from './api'\nimport logo from './assets/main-image.png'\nimport styles from './PersonSummary.module.scss'\nimport TagList from './TagList'\nimport { Person } from './types'\n\ninterface PersonSummaryProps {\n  person: Person\n}\n\nconst PersonSummary: FC<PersonSummaryProps> = ({ person }) => {\n  const [image, setImage] = useState(logo)\n\n  useEffect(() => {\n    ;(async () => {\n      if (person.photo) {\n        const img = await fetchImage(person.photo)\n        setImage(img)\n      }\n    })()\n  }, [person.photo])\n\n  return (\n    <div className={styles.container}>\n      <img className={styles.avatar} src={image} />\n      <div>\n        <Link to={`/people/${encodeURIComponent(person.uri)}`}>\n          {person.name || 'no name found'}\n        </Link>{' '}\n        <a href={person.uri}>link</a>\n      </div>\n      <TagList tags={person.interests} />\n    </div>\n  )\n}\n\nexport default PersonSummary\n","import intersection from 'lodash.intersection'\nimport { useMemo } from 'react'\nimport { useAppSelector } from './app/hooks'\nimport { ditapi } from './app/services/ditapi'\n// import { useDiscoverPeople } from './app/services/ditapi'\nimport { solidApi } from './app/services/solidApi'\nimport { useQueries } from './app/services/useQueries'\nimport { indexServers } from './config'\nimport { selectLogin } from './features/login/loginSlice'\nimport styles from './HorizontalList.module.scss'\nimport PersonSummary from './PersonSummary'\nimport { Person } from './types'\nimport useLoggedUser from './useLoggedUser'\n\nconst Discover = () => {\n  const webId = useAppSelector(selectLogin).webId\n  /* stream version (results show up sooner, but not connected to rtk-query)\n  const { data: discoveredPeople, isLoading } = useDiscoverPeople(webId)\n  // */\n\n  //* async version\n  const { data: discoveredPeople, isLoading } =\n    ditapi.endpoints.discoverPeople.useQuery(webId)\n  // */\n  const discoveredPeopleUris = useMemo(\n    () => (discoveredPeople ?? []).map(person => person.uri),\n    // () => (discoveredPeople ?? []).map(person => person.person),\n    [discoveredPeople],\n  )\n\n  const personQueries = useQueries(\n    solidApi.endpoints.readPerson,\n    discoveredPeopleUris,\n  )\n\n  const me = useLoggedUser()\n\n  if (!me) return <>Loading self...</>\n\n  if (indexServers.length === 0)\n    return (\n      <div>\n        No index servers were configured. You&apos;ll find nothing here.\n      </div>\n    )\n\n  const fetchedPeople = personQueries\n    .filter(query => query.data)\n    .map(query => query.data)\n    .filter(a => a) as Person[]\n\n  const peopleInCommon = fetchedPeople\n    .map(\n      person => [person, countMatch(person.interests, me.interests)] as const,\n    )\n    .sort((a, b) => b[1] - a[1])\n    .filter(a => !!a[1])\n\n  return (\n    <div>\n      {(isLoading ||\n        personQueries.find(\n          query => query.isLoading || query.isUninitialized,\n        )) && <div>Loading...</div>}\n      <ul className={styles.horizontalList}>\n        {peopleInCommon.map(([person, match]) => (\n          <li key={person.uri}>\n            <PersonSummary person={person} />{' '}\n            <span>match: {Math.round(match * 1000) / 10}%</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Discover\n\nconst countMatch = (a: unknown[], b: unknown[]): number => {\n  const common = intersection(a, b)\n  return common.length && common.length / (a.length * b.length) ** 0.5\n}\n","import TagList from './TagList'\nimport { DitThing } from './types'\nimport { Link } from 'react-router-dom'\n\nconst DitItem = ({ thing }: { thing: DitThing }) => (\n  <div>\n    <header>\n      <span>icon: {thing.type}</span>{' '}\n      <Link to={`/items/${encodeURIComponent(thing.uri)}`}>{thing.label}</Link>{' '}\n      <a href={thing.uri}>link</a>\n    </header>\n    <section>{thing.description}</section>\n    <section>\n      <TagList tags={thing.tags} />\n    </section>\n  </div>\n)\n\nexport default DitItem\n","import { skipToken } from '@reduxjs/toolkit/query'\nimport { Link, Navigate, useParams } from 'react-router-dom'\nimport { solidApi } from './app/services/solidApi'\nimport DitItem from './DitItem'\n\nconst DitItemPage = () => {\n  const { itemUri } = useParams<'itemUri'>()\n\n  const { data, isLoading, isUninitialized } =\n    solidApi.endpoints.readDitItem.useQuery(itemUri ?? skipToken)\n\n  const [removeDit, { isLoading: isRemoving, isSuccess }] =\n    solidApi.endpoints.removeDit.useMutation()\n\n  if (isSuccess) return <Navigate to=\"/\" />\n\n  if (!itemUri) return <>No Content...</>\n  if (isLoading || isUninitialized) return <div>Loading...</div>\n  if (!data) return <div>Not Found</div>\n\n  return (\n    <>\n      <DitItem thing={data} />\n      <aside>\n        <Link to={`/items/${encodeURIComponent(itemUri)}/edit`}>Edit</Link>{' '}\n        <button disabled={isRemoving} onClick={() => removeDit(itemUri)}>\n          DANGER: Remove\n        </button>\n      </aside>\n    </>\n  )\n}\n\nexport default DitItemPage\n","import { skipToken } from '@reduxjs/toolkit/query'\nimport { useAppSelector } from './app/hooks'\nimport { getDitupUri, solidApi } from './app/services/solidApi'\nimport DitItem from './DitItem'\nimport styles from './HorizontalList.module.scss'\nimport { selectLogin } from './features/login/loginSlice'\n\nconst DitList = () => {\n  const { webId } = useAppSelector(selectLogin)\n  const { data, isLoading, isUninitialized } =\n    solidApi.endpoints.readDitItems.useQuery(\n      webId ? getDitupUri(webId) : skipToken,\n    )\n  if (isLoading || isUninitialized || !data) return <div>Loading...</div>\n\n  return (\n    <div>\n      <ul className={styles.horizontalList}>\n        {data.map(thing => (\n          <li key={thing.uri}>\n            <DitItem thing={thing} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default DitList\n","import { skipToken } from '@reduxjs/toolkit/query'\nimport { Navigate, useParams } from 'react-router-dom'\nimport { solidApi } from './app/services/solidApi'\nimport DitItemForm from './DitItemForm'\nimport { DitThing } from './types'\n\nconst DitItemFormPage = () => {\n  const { itemUri } = useParams<'itemUri'>()\n\n  const { data, isLoading, isUninitialized } =\n    solidApi.endpoints.readDitItem.useQuery(itemUri ?? skipToken)\n\n  const [updateDit, { isLoading: isUpdating, isSuccess }] =\n    solidApi.endpoints.updateDit.useMutation()\n\n  if (isSuccess && data)\n    return <Navigate to={`/items/${encodeURIComponent(data.uri)}`} />\n\n  if (!itemUri) return <>No Content...</>\n  if (isLoading || isUninitialized) return <div>Loading...</div>\n  if (!data) return <div>Not Found</div>\n\n  const handleSubmit = (thing: DitThing) => updateDit({ thing })\n\n  return (\n    <DitItemForm\n      thing={data}\n      onSubmit={handleSubmit}\n      disabled={isUpdating}\n      readonlyUri\n    />\n  )\n}\n\nexport default DitItemFormPage\n","export default __webpack_public_path__ + \"static/media/logo-white.d49770e9.svg\";","import { skipToken } from '@reduxjs/toolkit/dist/query'\nimport { Link } from 'react-router-dom'\nimport { useAppDispatch, useAppSelector } from './app/hooks'\nimport { solidApi } from './app/services/solidApi'\nimport { logout, selectLogin } from './features/login/loginSlice'\nimport styles from './Header.module.scss'\nimport logo from './assets/logo-white.svg'\n\nconst Header = () => {\n  const webId = useAppSelector(selectLogin).webId\n  const dispatch = useAppDispatch()\n\n  const { data } = solidApi.endpoints.readPerson.useQuery(webId || skipToken)\n\n  return (\n    <header className={styles.header}>\n      <Link className={styles.homeLink} to=\"/\">\n        <img className={styles.logo} src={logo} alt=\"ditup logo\" /> ditup\n      </Link>\n      <span className={styles.separator} />\n      <Link to=\"/discover\">Discover</Link>\n      <Link to=\"/create\">Create</Link>\n      <Link to=\"/people/me\">{!data ? webId : data.name}</Link>\n      <button onClick={() => dispatch(logout())}>log out</button>\n    </header>\n  )\n}\n\nexport default Header\n","import { FormEventHandler, useState } from 'react'\nimport { useAppDispatch } from '../../app/hooks'\nimport { login } from './loginSlice'\n\nconst Login = () => {\n  const [provider, setProvider] = useState('')\n  const dispatch = useAppDispatch()\n  const handleSubmit: FormEventHandler<HTMLFormElement> = async e => {\n    e.preventDefault()\n    dispatch(login(provider))\n  }\n\n  return (\n    <div>\n      <header>Log in with your Solid identity</header>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={provider}\n          onChange={e => setProvider(e.target.value)}\n          list=\"providers\"\n        />\n        <datalist id=\"providers\">\n          <option value=\"https://solidcommunity.net\">Solid Community</option>\n          <option value=\"https://inrupt.net\">Inrupt</option>\n        </datalist>\n        <input type=\"submit\" value=\"Log in\" disabled={!provider} />\n      </form>\n    </div>\n  )\n}\n\nexport default Login\n","import { Link } from 'react-router-dom'\nimport Login from './features/login/Login'\nimport logo from './assets/main-image.png'\nimport styles from './Homepage.module.scss'\n\nconst Homepage = () => (\n  <div className={styles.page}>\n    <div className={styles.wrapper}>\n      <header>\n        <h1>ditup</h1>\n        <p>do it together!</p>\n      </header>\n\n      <img className={styles.homeImage} src={logo} alt=\"mushroom\" />\n\n      <nav>\n        <Login />\n        <Link to=\"/signup\">\n          <small>Get started with Solid?</small>\n        </Link>\n      </nav>\n    </div>\n  </div>\n)\n\nexport default Homepage\n","import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { fetchImage } from './api'\nimport { useAppSelector } from './app/hooks'\nimport { solidApi } from './app/services/solidApi'\nimport EditableTagList from './EditableTagList'\nimport { selectLogin } from './features/login/loginSlice'\nimport logo from './assets/main-image.png'\n\nconst Person = () => {\n  const personId = useParams<'personId'>().personId as string\n  const loginUri = useAppSelector(selectLogin).webId\n  const personUri = personId === 'me' ? loginUri : personId\n  const { data, isLoading } = solidApi.endpoints.readPerson.useQuery(personUri)\n  const [addInterest] = solidApi.endpoints.addInterest.useMutation()\n  const [removeInterest] = solidApi.endpoints.removeInterest.useMutation()\n\n  const [image, setImage] = useState(logo)\n\n  useEffect(() => {\n    ;(async () => {\n      if (data?.photo) {\n        const img = await fetchImage(data.photo)\n        setImage(img)\n      }\n    })()\n  }, [data?.photo])\n\n  if (!data) return <div>Loading...</div>\n\n  return (\n    <div>\n      <img src={image} style={{ width: '10rem' }} />\n      <div>\n        {isLoading ? '...' : data.name ?? ''} <a href={personUri}>link</a>\n      </div>\n      <EditableTagList\n        tags={data.interests}\n        onAddTag={interest => addInterest({ uri: personUri, interest })}\n        onRemoveTag={interest => removeInterest({ uri: personUri, interest })}\n      />\n      <a\n        href={`https://www.interesting.chat/?interests=${encodeURIComponent(\n          data.interests\n            .filter(uri => uri.includes('wikidata'))\n            .map(uri => uri.split('/').pop())\n            .join(','),\n        )}`}\n      >\n        Chat with a stranger about your interests\n      </a>\n    </div>\n  )\n}\n\nexport default Person\n","const Signup = () => <div>Info how to get started with Solid</div>\n\nexport default Signup\n","import { skipToken } from '@reduxjs/toolkit/dist/query'\nimport { useParams } from 'react-router-dom'\nimport { interestApi } from './app/services/interestApi'\n\nconst TagPage = () => {\n  const tagUri = useParams<'tagUri'>().tagUri\n\n  const { data, isLoading, isUninitialized } =\n    interestApi.endpoints.readInterest.useQuery(tagUri || skipToken)\n\n  if (isLoading || isUninitialized) return <>Loading...</>\n\n  if (!data) return <>No data</>\n\n  return (\n    <div>\n      {data.image && (\n        <img\n          style={{\n            float: 'right',\n            width: '20em',\n            maxWidth: '40vw',\n            margin: '-1.34rem 0 0 0',\n          }}\n          src={data.image}\n          alt={`Image of ${data.label}`}\n        />\n      )}\n      <header>\n        <h1>{data.label}</h1>\n        <p>{data.aliases.join(' • ')}</p>\n        <small>\n          <a href={data.uri}>{data.uri}</a>\n        </small>\n        {data.officialWebsite && (\n          <p>\n            website: <a href={data.officialWebsite}>{data.officialWebsite}</a>\n          </p>\n        )}\n      </header>\n      <section style={{ backgroundColor: 'pink' }}>{data.description}</section>\n    </div>\n  )\n}\n\nexport default TagPage\n","import { onSessionRestore } from '@inrupt/solid-client-authn-browser'\nimport { useNavigate } from 'react-router-dom'\nimport './App.css'\n\nconst usePreviousUriAfterSolidRedirect = () => {\n  const navigate = useNavigate()\n\n  onSessionRestore(url => {\n    navigate(new URL(url).pathname)\n    console.log('navigating', url)\n  })\n}\n\nexport default usePreviousUriAfterSolidRedirect\n","import { Route, Routes } from 'react-router-dom'\nimport './App.css'\nimport { useAppSelector } from './app/hooks'\nimport CreateDit from './CreateDit'\nimport Discover from './Discover'\nimport DitItemPage from './DitItemPage'\nimport DitList from './DitList'\nimport EditDitPage from './EditDitPage'\nimport { selectLogin } from './features/login/loginSlice'\nimport Header from './Header'\nimport Homepage from './Homepage'\nimport Person from './Person'\nimport Signup from './Signup'\nimport TagPage from './TagPage'\nimport usePreviousUri from './usePreviousUriAfterSolidRedirect'\n\nfunction App() {\n  usePreviousUri()\n\n  const login = useAppSelector(selectLogin)\n\n  if (login.status === 'loading') return <div>initializing</div>\n\n  if (!login.isLoggedIn)\n    return (\n      <div>\n        <Routes>\n          <Route path=\"*\" element={<Homepage />} />\n          <Route path=\"/signup\" element={<Signup />} />\n        </Routes>\n      </div>\n    )\n  return (\n    <div>\n      <Header />\n      <Routes>\n        <Route path=\"/\" element={<DitList />} />\n        <Route path=\"/discover\" element={<Discover />} />\n        <Route path=\"/people/:personId\" element={<Person />} />\n        <Route path=\"/create\" element={<CreateDit />} />\n        <Route path=\"/items/:itemUri\" element={<DitItemPage />} />\n        <Route path=\"/items/:itemUri/edit\" element={<EditDitPage />} />\n        <Route path=\"/tags/:tagUri\" element={<TagPage />} />\n      </Routes>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\nimport { store } from './app/store'\nimport { init } from './features/login/loginSlice'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\n// initialize application once at the beginning\nstore.dispatch(init())\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nconst root = createRoot(document.getElementById('root')!)\n\nroot.render(\n  <StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </StrictMode>,\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}