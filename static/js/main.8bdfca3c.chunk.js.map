{"version":3,"sources":["api.ts","HorizontalList.module.scss","Header.module.scss","Homepage.module.scss","PersonSummary.module.scss","DitItemForm.module.scss","DitItem.module.scss","app/hooks.ts","config.ts","app/services/solidApi.ts","app/services/interestApi.ts","features/login/loginAPI.ts","features/login/loginSlice.ts","app/services/ditapi.ts","app/store.ts","app/services/useQueries.ts","SearchInput.tsx","InterestSearchInput.tsx","EditableTagList.tsx","DitItemForm.tsx","CreateDit.tsx","HorizontalList.tsx","assets/main-image.png","useLoggedUser.ts","TagList.tsx","PersonSummary.tsx","Discover.tsx","PersonMini.tsx","DitItem.tsx","DitItemPage.tsx","DitList.tsx","EditDitPage.tsx","assets/logo-white.svg","Header.tsx","features/login/Login.tsx","Homepage.tsx","Person.tsx","Signup.tsx","TagPage.tsx","usePreviousUriAfterSolidRedirect.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["fetchImage","uri","a","fetch","response","headers","get","Buffer","arrayBuffer","from","toString","image","module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","ditUris","idea","problem","indexServers","JSON","parse","process","REACT_APP_INDEX_SERVERS","solidApi","createApi","reducerPath","baseQuery","data","fetchProperties","fetchAll","getSolidDataset","dataset","createSolidDataset","remove","forEach","subject","predicate","object","thing","getThing","changedDataset","removeThing","updatedThing","removeAll","setThing","removeUrl","setString","createThing","url","setStringWithLocale","setDatetime","set","setUrl","add","addUrl","saveSolidDatasetAt","returnThings","getThingAll","filter","returnData","map","returnThing","Object","fromEntries","entries","key","value","getUrlAll","getStringEnglishAll","getStringNoLocaleAll","getDatetimeAll","length","find","error","message","tagTypes","endpoints","build","readPerson","query","name","foaf","photo","vcard","hasPhoto","interests","topic_interest","providesTags","result","type","id","transformResponse","readDitItem","rdf","label","rdfs","description","dct","tags","as","tag","creator","createdAt","created","updatedAt","modified","keys","Date","getTime","undefined","readDitItems","things","includes","results","addInterest","mutation","interest","invalidatesTags","removeInterest","createDit","updateDit","removeDit","getDitupUri","webId","baseUrl","exec","Error","interestApi","fetchBaseQuery","searchInterests","encodeURIComponent","search","concepturi","rest","readInterest","match","wikidataRegex","meta","entity","values","entities","labels","en","descriptions","imageString","claims","P18","p","mainsnak","datavalue","logoImageString","P154","logoImage","officialWebsite","P856","aliases","login","oidcIssuer","solidLogin","redirectUrl","globalThis","location","href","clientName","init","handleIncomingRedirect","restorePreviousSession","getDefaultSession","info","createAsyncThunk","api","logout","loginSlice","createSlice","initialState","isLoggedIn","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","rejected","action","alert","payload","selectLogin","ditapi","baseSources","sources","sparqlEngine","QueryEngine","queryBindings","bindingsStream","toArray","binding","comunicaBaseQuery","getUser","discoverPeople","userId","person","count","commonCount","store","configureStore","reducer","loginReducer","middleware","getDefaultMiddleware","concat","useQueries","params","useEffect","param","dispatch","initiate","unsubscribe","select","SearchInput","options","isLoading","onChange","onSelect","e","target","option","onClick","InterestSearchInput","useState","setQuery","debouncedQuery","setDebouncedQuery","debouncedSet","useMemo","debounce","useQuery","skipToken","EditableTagList","onAddTag","onRemoveTag","tagsToFind","fetchedTags","combinedTags","i","split","pop","style","display","listStyleType","flexWrap","paddingLeft","margin","title","slice","to","TYPE_OPTIONS","DitItemForm","onSubmit","disabled","readonlyUri","setType","setLabel","setDescription","setTags","setUri","className","styles","form","preventDefault","defaultValue","cols","rows","tagUri","console","log","t","CreateDit","useMutation","isSuccess","crypto","randomUUID","HorizontalList","children","breakpointCols","default","masonryGrid","columnClassName","masonryGridColumn","useLoggedUser","TagList","me","highlightedTags","listStyles","horizontalList","color","PersonSummary","logo","setImage","img","container","avatar","src","Discover","discoveredPeople","discoveredPeopleUris","personQueries","peopleInCommon","countMatch","sort","b","isUninitialized","Math","round","common","intersection","PersonMini","width","DitItem","ditContainer","toDateString","DitItemPage","itemUri","useParams","isRemoving","DitList","DitItemFormPage","isUpdating","Header","header","homeLink","alt","separator","Login","provider","setProvider","handleSubmit","list","Homepage","page","wrapper","homeImage","Person","personId","loginUri","personUri","join","Signup","TagPage","float","maxWidth","backgroundColor","usePreviousUriAfterSolidRedirect","navigate","useNavigate","onSessionRestore","URL","pathname","App","usePreviousUri","path","element","EditDitPage","Boolean","window","hostname","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8bdfca3c.chunk.js","sourcesContent":["import { fetch } from '@inrupt/solid-client-authn-browser'\n\nexport const fetchImage = async (uri: string): Promise<string> => {\n  const response = await fetch(uri)\n\n  const image = `data:${response.headers.get(\n    'content-type',\n  )};base64,${Buffer.from(await response.arrayBuffer()).toString('base64')}`\n  return image\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"horizontalList\":\"HorizontalList_horizontalList__1L95r\",\"masonryGrid\":\"HorizontalList_masonryGrid__SBFhx\",\"masonryGridColumn\":\"HorizontalList_masonryGridColumn__wQWhs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__34Mnk\",\"homeLink\":\"Header_homeLink__2Plqh\",\"logo\":\"Header_logo__3Vr_I\",\"separator\":\"Header_separator__jCo-_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Homepage_page__3ASb0\",\"wrapper\":\"Homepage_wrapper__yr9nO\",\"homeImage\":\"Homepage_homeImage__1og7O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PersonSummary_container__niwwK\",\"avatar\":\"PersonSummary_avatar__1cKL_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"DitItemForm_form__PfJgE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ditContainer\":\"DitItem_ditContainer__3S-pN\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","export const ditUris = {\n  idea: 'https://ditup.example#Idea' as const,\n  problem: 'https://ditup.example#Problem' as const,\n} as const\n\nexport const indexServers: readonly string[] = JSON.parse(\n  process.env.REACT_APP_INDEX_SERVERS || '[]',\n)\n","// Need to use the React-specific entry point to import createApi\nimport {\n  addUrl,\n  createSolidDataset,\n  createThing,\n  getDatetimeAll,\n  getSolidDataset,\n  getStringEnglishAll,\n  getStringNoLocaleAll,\n  getThing,\n  getThingAll,\n  getUrlAll,\n  removeAll,\n  removeThing,\n  removeUrl,\n  saveSolidDatasetAt,\n  setDatetime,\n  setStringWithLocale,\n  setThing,\n  setUrl,\n  SolidDataset,\n  ThingPersisted,\n  WithChangeLog,\n} from '@inrupt/solid-client'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport { BaseQueryFn, createApi } from '@reduxjs/toolkit/query/react'\nimport { as, dct, foaf, rdf, rdfs, vcard } from 'rdf-namespaces'\nimport { ditUris } from '../../config'\nimport { DitThing, DitType, Person, Uri } from '../../types'\n\ntype Triple<T = string> = [string, string, T]\n\ntype MutationData = {\n  add?: Triple[]\n  set?: Triple[]\n  remove?: Triple[]\n  setString?: Triple[] // TODO think about language strings\n  setDatetime?: Triple<Date>[]\n}\n\ntype FetchShape = {\n  [key: string]: string\n}\n\ntype QueryResponse = {\n  [key: string]: string[]\n  uri: string[] /* this fixes an annoying TS error */\n}\n\ninterface QueryParams {\n  uri: string\n  fetchProperties: FetchShape\n  data?: MutationData\n  fetchAll?: boolean\n}\n\nconst solidQuery =\n  (): BaseQueryFn<QueryParams, QueryResponse[], { message: string }> =>\n  async ({ uri, data, fetchProperties, fetchAll = false }: QueryParams) => {\n    let dataset: SolidDataset\n    try {\n      dataset = await getSolidDataset(uri, { fetch })\n    } catch (e) {\n      dataset = createSolidDataset()\n    }\n\n    let changedDataset: (SolidDataset & WithChangeLog) | undefined\n\n    if (data?.remove)\n      data.remove.forEach(([subject, predicate, object]) => {\n        const thing = getThing(changedDataset ?? dataset, subject)\n        if (thing) {\n          if (predicate === '*') {\n            changedDataset = removeThing(changedDataset ?? dataset, thing)\n          } else if (object === '*') {\n            const updatedThing = removeAll(thing, predicate)\n            changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n          } else {\n            const updatedThing = removeUrl(thing, predicate, object)\n            changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n          }\n        }\n      })\n\n    if (data?.setString)\n      data.setString.forEach(([subject, predicate, object]) => {\n        const thing =\n          getThing(changedDataset ?? dataset, subject) ??\n          createThing({ url: subject })\n        if (thing) {\n          const updatedThing = setStringWithLocale(\n            thing,\n            predicate,\n            object,\n            'en',\n          )\n          changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n        }\n      })\n\n    if (data?.setDatetime)\n      data.setDatetime.forEach(([subject, predicate, object]) => {\n        const thing =\n          getThing(changedDataset ?? dataset, subject) ??\n          createThing({ url: subject })\n        if (thing) {\n          const updatedThing = setDatetime(thing, predicate, object)\n          changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n        }\n      })\n\n    if (data?.set)\n      data.set.forEach(([subject, predicate, object]) => {\n        const thing =\n          getThing(changedDataset ?? dataset, subject) ??\n          createThing({ url: subject })\n        if (thing) {\n          const updatedThing = setUrl(thing, predicate, object)\n          changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n        }\n      })\n\n    if (data?.add)\n      data.add.forEach(([subject, predicate, object]) => {\n        const thing =\n          getThing(changedDataset ?? dataset, subject) ??\n          createThing({ url: subject })\n\n        const updatedThing = addUrl(thing, predicate, object)\n        changedDataset = setThing(changedDataset ?? dataset, updatedThing)\n      })\n\n    if (changedDataset) {\n      await saveSolidDatasetAt(uri, changedDataset, { fetch })\n    }\n\n    let returnThings: ThingPersisted[]\n    if (!fetchAll) {\n      returnThings = [getThing(changedDataset ?? dataset, uri)].filter(\n        a => !!a,\n      ) as ThingPersisted[]\n    } else {\n      returnThings = getThingAll(changedDataset ?? dataset)\n    }\n\n    const returnData = returnThings.map(returnThing => ({\n      ...Object.fromEntries(\n        Object.entries(fetchProperties).map(([key, value]) => [\n          key,\n          [\n            ...getUrlAll(returnThing, value),\n            ...getStringEnglishAll(returnThing, value),\n            ...getStringNoLocaleAll(returnThing, value),\n            ...getDatetimeAll(returnThing, value),\n          ],\n        ]),\n      ),\n      uri: [returnThing.url],\n    }))\n\n    if (\n      !fetchAll &&\n      returnData.length === 0 &&\n      // also don't error when mutation removed the whole thing\n      !(data?.remove ?? []).find(([, predicate]) => predicate === '*')\n    )\n      return {\n        error: { message: 'thing not found' },\n      }\n\n    return {\n      data: returnData,\n    }\n  }\n\n// Define a service using a base URL and expected endpoints\nexport const solidApi = createApi({\n  reducerPath: 'solidapi',\n  baseQuery: solidQuery(),\n  tagTypes: ['Person', 'DitThing'],\n  endpoints: build => ({\n    readPerson: build.query<Person, string>({\n      query: uri => ({\n        uri,\n        fetchProperties: {\n          name: foaf.name,\n          photo: vcard.hasPhoto,\n          interests: foaf.topic_interest,\n        },\n      }),\n      providesTags: (result, error, uri) => [{ type: 'Person', id: uri }],\n      transformResponse: ([{ uri, name, photo, interests }]) => ({\n        uri: uri[0],\n        name: name[0] ?? '',\n        photo: photo[0] ?? '',\n        interests,\n      }),\n    }),\n    readDitItem: build.query<DitThing, Uri>({\n      query: uri => ({\n        uri,\n        fetchProperties: {\n          type: rdf.type,\n          label: rdfs.label,\n          description: dct.description,\n          tags: as.tag,\n          creator: dct.creator,\n          createdAt: dct.created,\n          updatedAt: dct.modified,\n        },\n      }),\n      transformResponse: ([\n        { uri, type, label, description, tags, creator, createdAt, updatedAt },\n      ]) => ({\n        uri: uri[0],\n        type:\n          (Object.keys(ditUris) as DitType[]).find(\n            key => ditUris[key] === type[0],\n          ) ?? 'idea',\n        label: label[0],\n        description: description[0],\n        tags,\n        creator: creator[0],\n        createdAt: createdAt[0]\n          ? new Date(createdAt[0]).getTime()\n          : (undefined as unknown as number), // an ugly hack, just to take care of things without creation date\n        updatedAt: updatedAt[0] ? new Date(updatedAt[0]).getTime() : undefined,\n      }),\n      providesTags: (result, error, uri) => [{ type: 'DitThing', id: uri }],\n    }),\n    readDitItems: build.query<DitThing[], Uri>({\n      query: uri => ({\n        uri,\n        fetchAll: true,\n        fetchProperties: {\n          type: rdf.type,\n          label: rdfs.label,\n          description: dct.description,\n          tags: as.tag,\n          creator: dct.creator,\n          createdAt: dct.created,\n          updatedAt: dct.modified,\n        },\n      }),\n      transformResponse: things =>\n        things\n          .map(\n            ({\n              uri,\n              type,\n              label,\n              description,\n              tags,\n              creator,\n              createdAt,\n              updatedAt,\n            }) => ({\n              uri: uri[0],\n              type: (Object.keys(ditUris) as DitType[]).find(key =>\n                type.includes(ditUris[key]),\n              ),\n              label: label[0],\n              description: description[0],\n              tags,\n              creator: creator[0],\n              createdAt: createdAt[0]\n                ? new Date(createdAt[0]).getTime()\n                : undefined,\n              updatedAt: updatedAt[0]\n                ? new Date(updatedAt[0]).getTime()\n                : undefined,\n            }),\n          )\n          .filter(thing => typeof thing.type !== 'undefined') as DitThing[],\n      providesTags: results =>\n        (results ?? []).map(result => ({ type: 'DitThing', id: result.uri })),\n    }),\n    addInterest: build.mutation<\n      { interests: string[] },\n      { uri: string; interest: string }\n    >({\n      query: ({ uri, interest }) => ({\n        uri,\n        data: {\n          add: [[uri, foaf.topic_interest, interest]],\n        },\n        fetchProperties: { interests: foaf.topic_interest },\n      }),\n      invalidatesTags: (result, error, { uri }) => [\n        { type: 'Person', id: uri },\n      ],\n    }),\n    removeInterest: build.mutation<\n      { interests: string[] },\n      { uri: string; interest: string }\n    >({\n      query: ({ uri, interest }) => ({\n        uri,\n        data: { remove: [[uri, foaf.topic_interest, interest]] },\n        fetchProperties: { interests: foaf.topic_interest },\n      }),\n      invalidatesTags: (result, error, { uri }) => [\n        { type: 'Person', id: uri },\n      ],\n    }),\n    createDit: build.mutation<\n      Uri,\n      { thing: Omit<DitThing, 'createdAt' | 'updatedAt'> }\n    >({\n      query: ({ thing }) => ({\n        uri: thing.uri,\n        data: {\n          add: [\n            [thing.uri, rdf.type, ditUris[thing.type]],\n            ...thing.tags.map(tag => [thing.uri, as.tag, tag] as Triple),\n          ],\n          setString: [\n            [thing.uri, rdfs.label, thing.label],\n            [thing.uri, dct.description, thing.description],\n          ],\n          setDatetime: [[thing.uri, dct.created, new Date()]],\n          set: [[thing.uri, dct.creator, thing.creator]],\n        },\n        fetchProperties: {},\n      }),\n      transformResponse: ([\n        {\n          uri: [uri],\n        },\n      ]) => uri,\n    }),\n    updateDit: build.mutation<\n      Uri,\n      { thing: Omit<DitThing, 'createdAt' | 'updatedAt'> }\n    >({\n      query: ({ thing }) => ({\n        uri: thing.uri,\n        data: {\n          set: [\n            [thing.uri, rdf.type, ditUris[thing.type]],\n            [thing.uri, dct.creator, thing.creator],\n          ],\n          remove: [[thing.uri, as.tag, '*']],\n          add: thing.tags.map(tag => [thing.uri, as.tag, tag] as Triple),\n          setString: [\n            [thing.uri, rdfs.label, thing.label],\n            [thing.uri, dct.description, thing.description],\n          ],\n          setDatetime: [[thing.uri, dct.modified, new Date()]],\n        },\n        fetchProperties: {},\n      }),\n      transformResponse: ([\n        {\n          uri: [uri],\n        },\n      ]) => uri,\n      invalidatesTags: (result, error, { thing }) => [\n        { type: 'DitThing', id: thing.uri },\n      ],\n    }),\n    removeDit: build.mutation<unknown, Uri>({\n      query: uri => ({\n        uri,\n        data: {\n          remove: [[uri, '*', '*']],\n        },\n        fetchProperties: {},\n      }),\n      invalidatesTags: (result, error, uri) => [{ type: 'DitThing', id: uri }],\n    }),\n  }),\n})\n\nexport const getDitupUri = (webId: string) => {\n  const baseUrl = /^(https?:\\/\\/.*)\\/profile\\/card#me$/g.exec(webId)?.[1]\n  if (!baseUrl) throw new Error('unable to generate hospex uri from webId')\n  return baseUrl + '/public/ditup.ttl'\n}\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { Interest } from '../../types'\n\nexport const interestApi = createApi({\n  reducerPath: 'interestapi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://www.wikidata.org/w/',\n  }),\n  tagTypes: ['Interest'],\n  endpoints: build => ({\n    searchInterests: build.query<Interest[], string>({\n      query: query => ({\n        url: `api.php?action=wbsearchentities&search=${encodeURIComponent(\n          query,\n        )}&language=en&limit=20&continue=0&format=json&uselang=en&type=item&origin=*`,\n      }),\n      // Pick out data and prevent nested properties in a hook or selector\n      transformResponse: (response: {\n        search: {\n          concepturi: string\n          label: string\n          description: string\n          photos: []\n          aliases: []\n        }[]\n      }) =>\n        response.search.map(({ concepturi, ...rest }) => ({\n          uri: concepturi,\n          ...rest,\n        })),\n      //*/\n      providesTags: (result, error, query) => [\n        { type: 'Interest', id: 'QUERY_STRING_' + query },\n      ],\n    }),\n    readInterest: build.query<Interest, string>({\n      query: uri => {\n        const id = uri.match(wikidataRegex)?.[2] ?? ''\n        return {\n          url: `api.php?action=wbgetentities&ids=${id}&languages=en&format=json&origin=*`,\n        }\n      },\n      transformResponse: (response: GetEntitiesResponse, meta, uri) => {\n        const entity = Object.values(response.entities)[0]\n        if (!entity) throw new Error('entity not found')\n\n        const label = entity.labels.en?.value ?? ''\n        const description = entity.descriptions.en?.value ?? ''\n        const imageString = (entity.claims.P18 ?? []).map(\n          p => p.mainsnak.datavalue.value,\n        )[0]\n        const logoImageString = (entity.claims.P154 ?? []).map(\n          p => p.mainsnak.datavalue.value,\n        )[0]\n        const image =\n          imageString &&\n          `https://commons.wikimedia.org/wiki/Special:FilePath/${encodeURIComponent(\n            imageString,\n          )}?width=300`\n\n        const logoImage =\n          logoImageString &&\n          `https://commons.wikimedia.org/wiki/Special:FilePath/${encodeURIComponent(\n            logoImageString,\n          )}?width=300`\n        const officialWebsite = (entity.claims.P856 ?? []).map(\n          p => p.mainsnak.datavalue.value,\n        )[0]\n        const aliases = (entity.aliases.en ?? []).map(({ value }) => value)\n\n        return {\n          uri,\n          label,\n          aliases,\n          description,\n          officialWebsite,\n          image: logoImage || image,\n        }\n      },\n      providesTags: (result, error, uri) => [{ type: 'Interest', id: uri }],\n    }),\n  }),\n})\n\nconst wikidataRegex =\n  /^https?:\\/\\/(w{3}\\.)?wikidata\\.org\\/entity\\/([A-Z0-9]*)\\/?$/\n/*\nexport const getInterest = async (uri: string): Promise<Interest> => {\n  const wikidataId = uri.match(wikidataRegex)?.[2] ?? ''\n  const dbpediaId = uri.match(dbpediaRegex)?.[2] ?? ''\n  const dataUri = wikidataId\n    ? `https://www.wikidata.org/wiki/Special:EntityData/${wikidataId}.ttl`\n    : dbpediaId\n    ? `https://dbpedia.org/data/${dbpediaId}.ttl`\n    : uri\n  const rawData = await (await fetchTurtle(dataUri)).text()\n  return await parseInterest(rawData, uri)\n}*/\n\ninterface GetEntitiesResponse {\n  entities: {\n    [key: string]: {\n      labels: { en?: { value: string } }\n      descriptions: { en?: { value: string } }\n      aliases: { en?: { value: string }[] }\n      claims: {\n        P18?: {\n          mainsnak: {\n            datavalue: { value: string }\n            datatype: 'commonsMedia'\n          }\n        }[]\n        P154?: {\n          mainsnak: {\n            datavalue: { value: string }\n            datatype: 'commonsMedia'\n          }\n        }[]\n        P856?: {\n          mainsnak: {\n            datavalue: { value: string }\n            datatype: 'url'\n          }\n        }[]\n      }\n    }\n  }\n}\n","import {\n  handleIncomingRedirect,\n  getDefaultSession,\n  login as solidLogin,\n} from '@inrupt/solid-client-authn-browser'\n\nexport const login = async (oidcIssuer: string) =>\n  await solidLogin({\n    oidcIssuer,\n    redirectUrl: globalThis.location.href,\n    clientName: 'ditup',\n  })\n\nexport const init = async () => {\n  await handleIncomingRedirect({\n    url: globalThis.location.href,\n    restorePreviousSession: true,\n  })\n\n  return getDefaultSession().info\n}\n\nexport { logout } from '@inrupt/solid-client-authn-browser'\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport * as api from './loginAPI'\n\nexport interface LoginState {\n  webId: string\n  isLoggedIn: boolean\n  status: 'idle' | 'loading' | 'failed'\n}\n\nconst initialState: LoginState = {\n  webId: '',\n  isLoggedIn: false,\n  status: 'loading',\n}\n\nexport const login = createAsyncThunk('login/login', api.login)\nexport const init = createAsyncThunk('login/init', api.init)\nexport const logout = createAsyncThunk('login/logout', api.logout)\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder\n      .addCase(login.pending, state => {\n        state.status = 'loading'\n      })\n      .addCase(login.fulfilled, state => {\n        state.status = 'idle'\n        state.isLoggedIn = true\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.status = 'failed'\n        alert(action.error.message)\n      })\n      .addCase(init.pending, state => {\n        state.status = 'loading'\n      })\n      .addCase(init.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.isLoggedIn = action.payload.isLoggedIn\n        state.webId = action.payload?.webId ?? ''\n      })\n      .addCase(logout.fulfilled, state => {\n        state.status = 'idle'\n        state.isLoggedIn = false\n        state.webId = ''\n      })\n  },\n})\n\nexport const selectLogin = (state: RootState) => state.login\n\nexport default loginSlice.reducer\n","import { QueryEngine } from '@comunica/query-sparql/lib/index-browser'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport { QueryReturnValue } from '@reduxjs/toolkit/dist/query/baseQueryTypes'\nimport { createApi } from '@reduxjs/toolkit/query/react'\nimport { useMemo } from 'react'\nimport { indexServers } from '../../config'\nimport useQuery from '../../useQuery'\n\ntype User = {\n  name: string\n  photo: string\n}\n\nconst comunicaBaseQuery =\n  ({ baseSources }: { baseSources: string[] } = { baseSources: [] }) =>\n  async <ResponseType extends Record<string, string | null>>({\n    query,\n    sources,\n  }: {\n    query: string\n    sources: string[]\n  }): Promise<\n    QueryReturnValue<ResponseType[], unknown, Record<string, unknown>>\n  > => {\n    const sparqlEngine = new QueryEngine()\n\n    const bindingsStream = await sparqlEngine.queryBindings(query, {\n      sources: [...baseSources, ...sources] as [string, ...string[]],\n      fetch,\n    })\n    return {\n      data: (await bindingsStream.toArray()).map(binding => {\n        const keys = [...binding.keys()].map(\n          ({ value }) => value as keyof ResponseType,\n        )\n\n        return Object.fromEntries(\n          keys.map(key => [key, binding.get(key as string)?.value ?? null]),\n        ) as ResponseType\n      }),\n    }\n  }\n\nexport const ditapi = createApi({\n  reducerPath: 'ditapi',\n  baseQuery: comunicaBaseQuery(),\n  endpoints: builder => ({\n    getUser: builder.query<User, string>({\n      query: (webId: string) => ({\n        query: `\n          PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n          PREFIX vcard: <http://www.w3.org/2006/vcard/ns#>\n          SELECT ?name ?photo WHERE {\n            <${webId}> foaf:name ?name.\n            OPTIONAL {<${webId}> vcard:hasPhoto ?photo.}\n          }`,\n        sources: [webId],\n      }),\n      transformResponse: (data: User[]) => data[0],\n    }),\n    discoverPeople: builder.query<{ uri: string; count: number }[], string>({\n      query: (userId: string) => ({\n        query: `\n          PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n          PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n          PREFIX owl: <http://www.w3.org/2002/07/owl#>\n          PREFIX dbo: <http://dbpedia.org/ontology/>\n          SELECT DISTINCT ?person (COUNT(DISTINCT ?thing) as ?commonCount)\n          WHERE {\n            <${userId}> foaf:topic_interest ?thing.\n            ?person foaf:topic_interest ?thing.\n            FILTER(?person != <${userId}>)\n          }\n          GROUP BY ?person`,\n        sources: [userId, ...indexServers],\n      }),\n      transformResponse: (data: { person: string; commonCount: string }[]) =>\n        data.map(({ person, commonCount }) => ({\n          uri: person,\n          count: +commonCount,\n        })),\n    }),\n  }),\n})\n\nexport const useGetUserInterests = (userId: string) => {\n  const query = useMemo(\n    () =>\n      `\n  PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n  PREFIX owl: <http://www.w3.org/2002/07/owl#>\n  PREFIX dbo: <http://dbpedia.org/ontology/>\n  SELECT DISTINCT ?uri ?label ?description\n  WHERE {\n    {\n      <${userId}> foaf:topic_interest ?uri.\n      ?uri rdfs:label ?label.\n      ?uri dbo:abstract ?description.\n    }\n    UNION {\n      <${userId}> foaf:topic_interest ?uri.\n      ?oneUri owl:sameAs ?uri.\n      ?oneUri rdfs:label ?label.\n      ?oneUri dbo:abstract ?description.\n    }\n    FILTER(lang(?label)='en')\n    FILTER(lang(?description)='en')\n  }`,\n    [userId],\n  )\n  const sources: [string, ...string[]] = useMemo(\n    () => [\n      userId,\n      // 'https://query.wikidata.org/sparql',\n      'https://query.wikidata.org/bigdata/ldf',\n      'https://fragments.dbpedia.org/2016-04/en',\n    ],\n    [userId],\n  )\n\n  const [errors, data, isLoading] = useQuery<{\n    uri: string\n    label: string\n    description: string\n  }>(query, sources)\n  return { errors, data, isLoading }\n}\n\nexport const useDiscoverPeople = (userId: string) => {\n  const query = useMemo(\n    () =>\n      `\n  PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n  PREFIX owl: <http://www.w3.org/2002/07/owl#>\n  PREFIX dbo: <http://dbpedia.org/ontology/>\n  SELECT DISTINCT ?person (COUNT(DISTINCT ?thing) as ?commonCount)\n  WHERE {\n    <${userId}> foaf:topic_interest ?thing.\n    ?person foaf:topic_interest ?thing.\n    FILTER(?person != <${userId}>)\n  }\n  GROUP BY ?person\n  `,\n    [userId],\n  )\n  const sources: [string, ...string[]] = useMemo(\n    () => [userId, ...indexServers],\n    [userId],\n  )\n\n  const [errors, data, isLoading] = useQuery<{\n    person: string\n    commonCount: string\n  }>(query, sources)\n  return { errors, data, isLoading }\n}\n\n/*import { createApi, BaseQueryFn } from '@reduxjs/toolkit/query'\nimport axios, { AxiosRequestConfig, AxiosError } from 'axios'\n\nconst axiosBaseQuery =\n  (\n    { baseUrl }: { baseUrl: string } = { baseUrl: '' }\n  ): BaseQueryFn<\n    {\n      url: string\n      method: AxiosRequestConfig['method']\n      data?: AxiosRequestConfig['data']\n      params?: AxiosRequestConfig['params']\n    },\n    unknown,\n    unknown\n  > =>\n  async ({ url, method, data, params }) => {\n    try {\n      const result = await axios({ url: baseUrl + url, method, data, params })\n      return { data: result.data }\n    } catch (axiosError) {\n      let err = axiosError as AxiosError\n      return {\n        error: {\n          status: err.response?.status,\n          data: err.response?.data || err.message,\n        },\n      }\n    }\n  }\n\nconst api = createApi({\n  baseQuery: axiosBaseQuery({\n    baseUrl: 'https://example.com',\n  }),\n  endpoints(build) {\n    return {\n      query: build.query({ query: () => ({ url: '/query', method: 'get' }) }),\n      mutation: build.mutation({\n        query: () => ({ url: '/mutation', method: 'post' }),\n      }),\n    }\n  },\n})*/\n/*\nconst bindingsStream = await myEngine.queryBindings(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n});\n\n// Consume results as a stream (best performance)\nbindingsStream.on('data', (binding) => {\n    console.log(binding.toString()); // Quick way to print bindings for testing\n\n    console.log(binding.has('s')); // Will be true\n\n    // Obtaining values\n    console.log(binding.get('s').value);\n    console.log(binding.get('s').termType);\n    console.log(binding.get('p').value);\n    console.log(binding.get('o').value);\n});\nbindingsStream.on('end', () => {\n    // The data-listener will not be called anymore once we get here.\n});\nbindingsStream.on('error', (error) => {\n    console.error(error);\n});\n\n// Consume results as an array (easier)\nconst bindings = await bindingsStream.toArray();\nconsole.log(bindings[0].get('s').value);\nconsole.log(bindings[0].get('s').termType);\n*/\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport loginReducer from '../features/login/loginSlice'\nimport { ditapi } from './services/ditapi'\nimport { solidApi } from './services/solidApi'\nimport { interestApi } from './services/interestApi'\n\nexport const store = configureStore({\n  reducer: {\n    login: loginReducer,\n    [ditapi.reducerPath]: ditapi.reducer,\n    [solidApi.reducerPath]: solidApi.reducer,\n    [interestApi.reducerPath]: interestApi.reducer,\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware()\n      .concat(ditapi.middleware)\n      .concat(solidApi.middleware)\n      .concat(interestApi.middleware),\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// https://github.com/reduxjs/redux-toolkit/discussions/1171#discussioncomment-2554980\n\nimport {\n  QueryDefinition,\n  EndpointDefinitions,\n} from '@reduxjs/toolkit/query/react'\n\nimport { ApiEndpointQuery } from '@reduxjs/toolkit/dist/query/core/module'\nimport { useEffect } from 'react'\nimport { QueryActionCreatorResult } from '@reduxjs/toolkit/dist/query/core/buildInitiate'\nimport { useSelector } from 'react-redux'\nimport { store } from '../store'\n\n/**\n * Allows running a query on a collection of data\n * @param query The RTK ApiEndpointQuery to run\n * @param params a list of params that will be run by the query\n * @returns the rtk query result (same as useGetXQuery())\n */\nexport function useQueries<\n  Q extends QueryDefinition<any, any, any, any>,\n  D extends EndpointDefinitions,\n>(\n  query: ApiEndpointQuery<Q, D>,\n  params: Parameters<typeof query['initiate']>[0][],\n) {\n  useEffect(() => {\n    const results: QueryActionCreatorResult<any>[] = params.map(param =>\n      store.dispatch(query.initiate(param as any)),\n    )\n    return () => {\n      for (const result of results) {\n        result.unsubscribe()\n      }\n    }\n  }, [query, params])\n  return useSelector(state =>\n    params.map(param => query.select(param)(state as any)),\n  )\n}\n","const SearchInput = ({\n  value,\n  options,\n  isLoading,\n  onChange,\n  onSelect,\n}: {\n  value: string\n  options: { label: string; value: string }[]\n  isLoading: boolean\n  onChange: (value: string) => void\n  onSelect: (value: string) => void\n}) => {\n  return (\n    <>\n      <input value={value} onChange={e => onChange(e.target.value)} />\n      {isLoading && 'searching'}\n      <ul>\n        {options.map(option => (\n          <li key={option.value}>\n            <button onClick={() => onSelect(option.value)}>\n              {option.label}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default SearchInput\n","import { useEffect, useMemo, useState } from 'react'\nimport { interestApi } from './app/services/interestApi'\nimport SearchInput from './SearchInput'\nimport { skipToken } from '@reduxjs/toolkit/query/react'\nimport debounce from 'lodash.debounce'\nimport { Interest } from './types'\n\nconst InterestSearchInput = ({\n  onSelect,\n}: {\n  onSelect: (interest: Interest) => void\n}) => {\n  const [query, setQuery] = useState('')\n\n  const [debouncedQuery, setDebouncedQuery] = useState('')\n\n  const debouncedSet = useMemo(() => debounce(setDebouncedQuery, 500), [])\n\n  useEffect(() => {\n    debouncedSet(query)\n  }, [query, debouncedSet])\n\n  const { data: interests, isLoading } =\n    interestApi.endpoints.searchInterests.useQuery(debouncedQuery || skipToken)\n\n  const handleSelect = (uri: string) => {\n    const interest = (interests ?? []).find(interest => interest.uri === uri)\n    if (!interest) throw new Error('this is a glitch')\n    onSelect(interest)\n    setQuery('')\n  }\n  return (\n    <SearchInput\n      value={query}\n      options={((query && interests) || []).map(\n        ({ label, description, uri }) => ({\n          label: `${label}: ${description}`,\n          value: uri,\n        }),\n      )}\n      isLoading={isLoading}\n      onChange={setQuery}\n      onSelect={handleSelect}\n    />\n  )\n}\n\nexport default InterestSearchInput\n","import { FC, useMemo } from 'react'\nimport { Link } from 'react-router-dom'\nimport { interestApi } from './app/services/interestApi'\nimport { useQueries } from './app/services/useQueries'\nimport InterestSearchInput from './InterestSearchInput'\n\ninterface Props {\n  tags: string[]\n  onAddTag: (tag: string) => void\n  onRemoveTag: (tag: string) => void\n}\n\nconst EditableTagList: FC<Props> = ({ tags, onAddTag, onRemoveTag }) => {\n  const tagsToFind = useMemo(\n    () => tags.filter(uri => uri.includes('wikidata')),\n    [tags],\n  )\n\n  const tagQueries = useQueries(interestApi.endpoints.readInterest, tagsToFind)\n\n  const fetchedTags = tagQueries\n    .filter(query => query.data)\n    .map(query => query.data)\n    .filter(a => a) as { uri: string; label: string; description: string }[]\n\n  const combinedTags = tags.map(uri => {\n    const tag = fetchedTags.find(i => i.uri === uri) ?? {\n      uri,\n      label: uri.split('/').pop(),\n      description: uri,\n    }\n    return tag\n  })\n\n  return (\n    <div>\n      <ul\n        style={{\n          display: 'flex',\n          listStyleType: 'none',\n          flexWrap: 'wrap',\n          paddingLeft: 0,\n        }}\n      >\n        {combinedTags.map(tag => (\n          <li\n            style={{ margin: '10px' }}\n            key={tag.uri}\n            title={\n              tag.description.slice(0, 300) +\n              (tag.description.length > 300 ? '...' : '')\n            }\n          >\n            <Link to={`/tags/${encodeURIComponent(tag.uri)}`}>{tag.label}</Link>\n            <button\n              onClick={() => {\n                onRemoveTag(tag.uri)\n              }}\n            >\n              remove\n            </button>\n          </li>\n        ))}\n      </ul>\n      <InterestSearchInput onSelect={tag => onAddTag(tag.uri)} />\n    </div>\n  )\n}\n\nexport default EditableTagList\n","import { FormEventHandler, useState } from 'react'\nimport styles from './DitItemForm.module.scss'\nimport EditableTagList from './EditableTagList'\nimport { DitThingBasic, DitType, Uri } from './types'\n\nconst TYPE_OPTIONS: DitType[] = ['idea', 'problem']\n\ninterface DitThingEmptyOption extends Omit<DitThingBasic, 'type'> {\n  type: DitType | ''\n}\n\ninterface DitItemFormProps {\n  thing: DitThingEmptyOption\n  onSubmit: (data: DitThingBasic) => void\n  disabled?: boolean\n  readonlyUri?: boolean\n}\n\nconst DitItemForm = ({\n  thing,\n  onSubmit,\n  disabled = false,\n  readonlyUri = false,\n}: DitItemFormProps) => {\n  const [type, setType] = useState(thing.type)\n  const [label, setLabel] = useState(thing.label)\n  const [description, setDescription] = useState(thing.description)\n  const [tags, setTags] = useState(thing.tags)\n  const [uri, setUri] = useState(thing.uri)\n\n  const handleAddTag = (tagUri: Uri) => {\n    if (!tags.find(tag => tag === tagUri)) setTags(tags => [...tags, tagUri])\n    else {\n      console.log('tag already in list')\n    }\n  }\n\n  const handleRemoveTag = (tagUri: Uri) => {\n    if (!tags.find(tag => tag === tagUri))\n      throw new Error('tag not in list (should not happen!)')\n\n    setTags(tags => tags.filter(t => t !== tagUri))\n  }\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = e => {\n    e.preventDefault()\n    if (!type) return\n    onSubmit({ type, uri, label, description, tags })\n  }\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <select\n        value={type}\n        defaultValue=\"\"\n        onChange={e => setType(e.target.value as DitType)}\n      >\n        <option disabled value=\"\">\n          {' '}\n          -- select type --{' '}\n        </option>\n        {TYPE_OPTIONS.map(option => (\n          <option key={option}>{option}</option>\n        ))}\n      </select>\n      <input\n        type=\"text\"\n        disabled={readonlyUri}\n        value={uri}\n        onChange={e => setUri(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        value={label}\n        onChange={e => setLabel(e.target.value)}\n      />\n      <textarea\n        value={description}\n        onChange={e => setDescription(e.target.value)}\n        cols={30}\n        rows={10}\n      ></textarea>\n\n      <EditableTagList\n        tags={tags}\n        onAddTag={handleAddTag}\n        onRemoveTag={handleRemoveTag}\n      />\n\n      <input type=\"submit\" value=\"Save\" disabled={disabled} />\n    </form>\n  )\n}\n\nexport default DitItemForm\n","import { Navigate } from 'react-router-dom'\nimport { useAppSelector } from './app/hooks'\nimport { getDitupUri, solidApi } from './app/services/solidApi'\nimport DitItemForm from './DitItemForm'\nimport { selectLogin } from './features/login/loginSlice'\nimport { DitThingBasic } from './types'\n\nconst CreateDit = () => {\n  const webId = useAppSelector(selectLogin).webId\n\n  const [createDit, { isLoading, isSuccess, data }] =\n    solidApi.endpoints.createDit.useMutation()\n\n  if (isSuccess && data)\n    return <Navigate to={`/items/${encodeURIComponent(data)}`} />\n\n  const handleSubmit = (thing: DitThingBasic) =>\n    createDit({ thing: { ...thing, creator: webId } })\n\n  return (\n    <div>\n      <DitItemForm\n        thing={{\n          type: '',\n          uri: `${getDitupUri(webId)}#${globalThis.crypto.randomUUID()}`,\n          label: '',\n          description: '',\n          tags: [],\n        }}\n        onSubmit={handleSubmit}\n        disabled={isLoading}\n      />\n    </div>\n  )\n}\n\nexport default CreateDit\n","import { ReactNode } from 'react'\nimport Masonry from 'react-masonry-css'\nimport styles from './HorizontalList.module.scss'\n\nconst HorizontalList = ({ children }: { children: ReactNode }) => (\n  <Masonry\n    breakpointCols={{ default: 3, 600: 1, 1200: 2 }}\n    className={styles.masonryGrid}\n    columnClassName={styles.masonryGridColumn}\n  >\n    {children}\n  </Masonry>\n)\nexport default HorizontalList\n","export default __webpack_public_path__ + \"static/media/main-image.62fd6594.png\";","import { solidApi } from './app/services/solidApi'\nimport { useAppSelector } from './app/hooks'\nimport { selectLogin } from './features/login/loginSlice'\nimport { skipToken } from '@reduxjs/toolkit/dist/query'\n\nconst useLoggedUser = () => {\n  const webId = useAppSelector(selectLogin).webId\n  const { data: me } = solidApi.endpoints.readPerson.useQuery(\n    webId || skipToken,\n  )\n  return me\n}\n\nexport default useLoggedUser\n","import { FC, useMemo } from 'react'\nimport { interestApi } from './app/services/interestApi'\nimport { useQueries } from './app/services/useQueries'\nimport useLoggedUser from './useLoggedUser'\nimport listStyles from './HorizontalList.module.scss'\nimport { Link } from 'react-router-dom'\n\ninterface Props {\n  tags: string[]\n}\n\nconst TagList: FC<Props> = ({ tags }) => {\n  const tagsToFind = useMemo(\n    () => tags.filter(uri => uri.includes('wikidata')),\n    [tags],\n  )\n\n  const me = useLoggedUser()\n  const highlightedTags = me?.interests ?? []\n\n  const tagQueries = useQueries(interestApi.endpoints.readInterest, tagsToFind)\n\n  const fetchedTags = tagQueries\n    .filter(query => query.data)\n    .map(query => query.data)\n    .filter(a => a) as { uri: string; label: string; description: string }[]\n\n  const combinedTags = tags.map(uri => {\n    const tag = fetchedTags.find(i => i.uri === uri) ?? {\n      uri,\n      label: uri.split('/').pop(),\n      description: uri,\n    }\n    return tag\n  })\n\n  return (\n    <ul className={listStyles.horizontalList}>\n      {combinedTags.map(tag => (\n        <li\n          key={tag.uri}\n          title={\n            tag.description.slice(0, 300) +\n            (tag.description.length > 300 ? '...' : '')\n          }\n        >\n          <Link\n            style={{\n              color: highlightedTags.includes(tag.uri) ? 'red' : undefined,\n            }}\n            to={`/tags/${encodeURIComponent(tag.uri)}`}\n          >\n            {tag.label}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default TagList\n","import { FC, useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { fetchImage } from './api'\nimport logo from './assets/main-image.png'\nimport styles from './PersonSummary.module.scss'\nimport TagList from './TagList'\nimport { Person } from './types'\n\ninterface PersonSummaryProps {\n  person: Person\n}\n\nconst PersonSummary: FC<PersonSummaryProps> = ({ person }) => {\n  const [image, setImage] = useState(logo)\n\n  useEffect(() => {\n    ;(async () => {\n      if (person.photo) {\n        const img = await fetchImage(person.photo)\n        setImage(img)\n      }\n    })()\n  }, [person.photo])\n\n  return (\n    <div className={styles.container}>\n      <img className={styles.avatar} src={image} />\n      <div>\n        <Link to={`/people/${encodeURIComponent(person.uri)}`}>\n          {person.name || 'no name found'}\n        </Link>{' '}\n        <a href={person.uri}>link</a>\n      </div>\n      <TagList tags={person.interests} />\n    </div>\n  )\n}\n\nexport default PersonSummary\n","import intersection from 'lodash.intersection'\nimport { useMemo } from 'react'\nimport { useAppSelector } from './app/hooks'\nimport { ditapi } from './app/services/ditapi'\n// import { useDiscoverPeople } from './app/services/ditapi'\nimport { solidApi } from './app/services/solidApi'\nimport { useQueries } from './app/services/useQueries'\nimport { indexServers } from './config'\nimport { selectLogin } from './features/login/loginSlice'\nimport HorizontalList from './HorizontalList'\nimport PersonSummary from './PersonSummary'\nimport { Person } from './types'\nimport useLoggedUser from './useLoggedUser'\n\nconst Discover = () => {\n  const webId = useAppSelector(selectLogin).webId\n  /* stream version (results show up sooner, but not connected to rtk-query)\n  const { data: discoveredPeople, isLoading } = useDiscoverPeople(webId)\n  // */\n\n  //* async version\n  const { data: discoveredPeople, isLoading } =\n    ditapi.endpoints.discoverPeople.useQuery(webId)\n  // */\n  const discoveredPeopleUris = useMemo(\n    () => (discoveredPeople ?? []).map(person => person.uri),\n    // () => (discoveredPeople ?? []).map(person => person.person),\n    [discoveredPeople],\n  )\n\n  const personQueries = useQueries(\n    solidApi.endpoints.readPerson,\n    discoveredPeopleUris,\n  )\n\n  const me = useLoggedUser()\n\n  if (!me) return <>Loading self...</>\n\n  if (indexServers.length === 0)\n    return (\n      <div>\n        No index servers were configured. You&apos;ll find nothing here.\n      </div>\n    )\n\n  const fetchedPeople = personQueries\n    .filter(query => query.data)\n    .map(query => query.data)\n    .filter(a => a) as Person[]\n\n  const peopleInCommon = fetchedPeople\n    .map(\n      person => [person, countMatch(person.interests, me.interests)] as const,\n    )\n    .sort((a, b) => b[1] - a[1])\n    .filter(a => !!a[1])\n\n  return (\n    <div>\n      {(isLoading ||\n        personQueries.find(\n          query => query.isLoading || query.isUninitialized,\n        )) && <div>Loading...</div>}\n      <HorizontalList>\n        {peopleInCommon.map(([person, match]) => (\n          <div key={person.uri}>\n            <PersonSummary person={person} />{' '}\n            <span>match: {Math.round(match * 1000) / 10}%</span>\n          </div>\n        ))}\n      </HorizontalList>\n    </div>\n  )\n}\n\nexport default Discover\n\nconst countMatch = (a: unknown[], b: unknown[]): number => {\n  const common = intersection(a, b)\n  return common.length && common.length / (a.length * b.length) ** 0.5\n}\n","import { useEffect, useState } from 'react'\nimport { fetchImage } from './api'\nimport { solidApi } from './app/services/solidApi'\nimport logo from './assets/main-image.png'\nimport { Uri } from './types'\n\nconst PersonMini = ({ uri }: { uri: Uri }) => {\n  const { data } = solidApi.endpoints.readPerson.useQuery(uri)\n\n  const [image, setImage] = useState(logo)\n\n  useEffect(() => {\n    ;(async () => {\n      if (data?.photo) {\n        const img = await fetchImage(data.photo)\n        setImage(img)\n      }\n    })()\n  }, [data?.photo])\n\n  if (!data) return null\n\n  return (\n    <div>\n      <img src={image} style={{ width: '1rem' }} /> {data.name}\n    </div>\n  )\n}\n\nexport default PersonMini\n","import { Link } from 'react-router-dom'\nimport styles from './DitItem.module.scss'\nimport PersonMini from './PersonMini'\nimport TagList from './TagList'\nimport { DitThing } from './types'\n\nconst DitItem = ({ thing }: { thing: DitThing }) => (\n  <div className={styles.ditContainer}>\n    <header>\n      <span>icon: {thing.type}</span>{' '}\n      <Link to={`/items/${encodeURIComponent(thing.uri)}`}>{thing.label}</Link>{' '}\n      <a href={thing.uri}>link</a>\n    </header>\n    <section>{thing.description}</section>\n    <section>\n      <TagList tags={thing.tags} />\n    </section>\n    {thing.createdAt && (\n      <aside>Created {new Date(thing.createdAt).toDateString()}</aside>\n    )}\n    {thing.updatedAt && (\n      <aside>Updated {new Date(thing.updatedAt).toDateString()}</aside>\n    )}\n    <aside>\n      <PersonMini uri={thing.creator} />\n    </aside>\n  </div>\n)\n\nexport default DitItem\n","import { skipToken } from '@reduxjs/toolkit/query'\nimport { Link, Navigate, useParams } from 'react-router-dom'\nimport { solidApi } from './app/services/solidApi'\nimport DitItem from './DitItem'\n\nconst DitItemPage = () => {\n  const { itemUri } = useParams<'itemUri'>()\n\n  const { data, isLoading, isUninitialized } =\n    solidApi.endpoints.readDitItem.useQuery(itemUri ?? skipToken)\n\n  const [removeDit, { isLoading: isRemoving, isSuccess }] =\n    solidApi.endpoints.removeDit.useMutation()\n\n  if (isSuccess) return <Navigate to=\"/\" />\n\n  if (!itemUri) return <>No Content...</>\n  if (isLoading || isUninitialized) return <div>Loading...</div>\n  if (!data) return <div>Not Found</div>\n\n  return (\n    <>\n      <DitItem thing={data} />\n      <aside>\n        <Link to={`/items/${encodeURIComponent(itemUri)}/edit`}>Edit</Link>{' '}\n        <button disabled={isRemoving} onClick={() => removeDit(itemUri)}>\n          DANGER: Remove\n        </button>\n      </aside>\n    </>\n  )\n}\n\nexport default DitItemPage\n","import { skipToken } from '@reduxjs/toolkit/query'\nimport { useAppSelector } from './app/hooks'\nimport { getDitupUri, solidApi } from './app/services/solidApi'\nimport DitItem from './DitItem'\nimport { selectLogin } from './features/login/loginSlice'\nimport HorizontalList from './HorizontalList'\n\nconst DitList = () => {\n  const { webId } = useAppSelector(selectLogin)\n  const { data, isLoading, isUninitialized } =\n    solidApi.endpoints.readDitItems.useQuery(\n      webId ? getDitupUri(webId) : skipToken,\n    )\n  if (isLoading || isUninitialized || !data) return <div>Loading...</div>\n\n  return (\n    <HorizontalList>\n      {data.map(thing => (\n        <div key={thing.uri}>\n          <DitItem thing={thing} />\n        </div>\n      ))}\n    </HorizontalList>\n  )\n}\n\nexport default DitList\n","import { skipToken } from '@reduxjs/toolkit/query'\nimport { Navigate, useParams } from 'react-router-dom'\nimport { useAppSelector } from './app/hooks'\nimport { solidApi } from './app/services/solidApi'\nimport DitItemForm from './DitItemForm'\nimport { selectLogin } from './features/login/loginSlice'\nimport { DitThingBasic } from './types'\n\nconst DitItemFormPage = () => {\n  const webId = useAppSelector(selectLogin).webId\n  const { itemUri } = useParams<'itemUri'>()\n\n  const { data, isLoading, isUninitialized } =\n    solidApi.endpoints.readDitItem.useQuery(itemUri ?? skipToken)\n\n  const [updateDit, { isLoading: isUpdating, isSuccess }] =\n    solidApi.endpoints.updateDit.useMutation()\n\n  if (isSuccess && data)\n    return <Navigate to={`/items/${encodeURIComponent(data.uri)}`} />\n\n  if (!itemUri) return <>No Content...</>\n  if (isLoading || isUninitialized) return <div>Loading...</div>\n  if (!data) return <div>Not Found</div>\n\n  const handleSubmit = (thing: DitThingBasic) =>\n    updateDit({ thing: { ...thing, creator: webId } })\n\n  return (\n    <DitItemForm\n      thing={data}\n      onSubmit={handleSubmit}\n      disabled={isUpdating}\n      readonlyUri\n    />\n  )\n}\n\nexport default DitItemFormPage\n","export default __webpack_public_path__ + \"static/media/logo-white.d49770e9.svg\";","import { skipToken } from '@reduxjs/toolkit/dist/query'\nimport { Link } from 'react-router-dom'\nimport { useAppDispatch, useAppSelector } from './app/hooks'\nimport { solidApi } from './app/services/solidApi'\nimport { logout, selectLogin } from './features/login/loginSlice'\nimport styles from './Header.module.scss'\nimport logo from './assets/logo-white.svg'\n\nconst Header = () => {\n  const webId = useAppSelector(selectLogin).webId\n  const dispatch = useAppDispatch()\n\n  const { data } = solidApi.endpoints.readPerson.useQuery(webId || skipToken)\n\n  return (\n    <header className={styles.header}>\n      <Link className={styles.homeLink} to=\"/\">\n        <img className={styles.logo} src={logo} alt=\"ditup logo\" /> ditup\n      </Link>\n      <span className={styles.separator} />\n      <Link to=\"/discover\">Discover</Link>\n      <Link to=\"/create\">Create</Link>\n      <Link to=\"/people/me\">{!data ? webId : data.name}</Link>\n      <button onClick={() => dispatch(logout())}>log out</button>\n    </header>\n  )\n}\n\nexport default Header\n","import { FormEventHandler, useState } from 'react'\nimport { useAppDispatch } from '../../app/hooks'\nimport { login } from './loginSlice'\n\nconst Login = () => {\n  const [provider, setProvider] = useState('')\n  const dispatch = useAppDispatch()\n  const handleSubmit: FormEventHandler<HTMLFormElement> = async e => {\n    e.preventDefault()\n    dispatch(login(provider))\n  }\n\n  return (\n    <div>\n      <header>Log in with your Solid identity</header>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={provider}\n          onChange={e => setProvider(e.target.value)}\n          list=\"providers\"\n        />\n        <datalist id=\"providers\">\n          <option value=\"https://solidcommunity.net\">Solid Community</option>\n          <option value=\"https://inrupt.net\">Inrupt</option>\n        </datalist>\n        <input type=\"submit\" value=\"Log in\" disabled={!provider} />\n      </form>\n    </div>\n  )\n}\n\nexport default Login\n","import { Link } from 'react-router-dom'\nimport Login from './features/login/Login'\nimport logo from './assets/main-image.png'\nimport styles from './Homepage.module.scss'\n\nconst Homepage = () => (\n  <div className={styles.page}>\n    <div className={styles.wrapper}>\n      <header>\n        <h1>ditup</h1>\n        <p>do it together!</p>\n      </header>\n\n      <img className={styles.homeImage} src={logo} alt=\"mushroom\" />\n\n      <nav>\n        <Login />\n        <Link to=\"/signup\">\n          <small>Get started with Solid?</small>\n        </Link>\n      </nav>\n    </div>\n  </div>\n)\n\nexport default Homepage\n","import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { fetchImage } from './api'\nimport { useAppSelector } from './app/hooks'\nimport { solidApi } from './app/services/solidApi'\nimport EditableTagList from './EditableTagList'\nimport { selectLogin } from './features/login/loginSlice'\nimport logo from './assets/main-image.png'\n\nconst Person = () => {\n  const personId = useParams<'personId'>().personId as string\n  const loginUri = useAppSelector(selectLogin).webId\n  const personUri = personId === 'me' ? loginUri : personId\n  const { data, isLoading } = solidApi.endpoints.readPerson.useQuery(personUri)\n  const [addInterest] = solidApi.endpoints.addInterest.useMutation()\n  const [removeInterest] = solidApi.endpoints.removeInterest.useMutation()\n\n  const [image, setImage] = useState(logo)\n\n  useEffect(() => {\n    ;(async () => {\n      if (data?.photo) {\n        const img = await fetchImage(data.photo)\n        setImage(img)\n      }\n    })()\n  }, [data?.photo])\n\n  if (!data) return <div>Loading...</div>\n\n  return (\n    <div>\n      <img src={image} style={{ width: '10rem' }} />\n      <div>\n        {isLoading ? '...' : data.name ?? ''} <a href={personUri}>link</a>\n      </div>\n      <EditableTagList\n        tags={data.interests}\n        onAddTag={interest => addInterest({ uri: personUri, interest })}\n        onRemoveTag={interest => removeInterest({ uri: personUri, interest })}\n      />\n      <a\n        href={`https://www.interesting.chat/?interests=${encodeURIComponent(\n          data.interests\n            .filter(uri => uri.includes('wikidata'))\n            .map(uri => uri.split('/').pop())\n            .join(','),\n        )}`}\n      >\n        Chat with a stranger about your interests\n      </a>\n    </div>\n  )\n}\n\nexport default Person\n","const Signup = () => <div>Info how to get started with Solid</div>\n\nexport default Signup\n","import { skipToken } from '@reduxjs/toolkit/dist/query'\nimport { useParams } from 'react-router-dom'\nimport { interestApi } from './app/services/interestApi'\n\nconst TagPage = () => {\n  const tagUri = useParams<'tagUri'>().tagUri\n\n  const { data, isLoading, isUninitialized } =\n    interestApi.endpoints.readInterest.useQuery(tagUri || skipToken)\n\n  if (isLoading || isUninitialized) return <>Loading...</>\n\n  if (!data) return <>No data</>\n\n  return (\n    <div>\n      {data.image && (\n        <img\n          style={{\n            float: 'right',\n            width: '20em',\n            maxWidth: '40vw',\n            margin: '-1.34rem 0 0 0',\n          }}\n          src={data.image}\n          alt={`Image of ${data.label}`}\n        />\n      )}\n      <header>\n        <h1>{data.label}</h1>\n        <p>{data.aliases.join(' • ')}</p>\n        <small>\n          <a href={data.uri}>{data.uri}</a>\n        </small>\n        {data.officialWebsite && (\n          <p>\n            website: <a href={data.officialWebsite}>{data.officialWebsite}</a>\n          </p>\n        )}\n      </header>\n      <section style={{ backgroundColor: 'pink' }}>{data.description}</section>\n    </div>\n  )\n}\n\nexport default TagPage\n","import { onSessionRestore } from '@inrupt/solid-client-authn-browser'\nimport { useNavigate } from 'react-router-dom'\nimport './App.css'\n\nconst usePreviousUriAfterSolidRedirect = () => {\n  const navigate = useNavigate()\n\n  onSessionRestore(url => {\n    navigate(new URL(url).pathname)\n    console.log('navigating', url)\n  })\n}\n\nexport default usePreviousUriAfterSolidRedirect\n","import { Route, Routes } from 'react-router-dom'\nimport './App.css'\nimport { useAppSelector } from './app/hooks'\nimport CreateDit from './CreateDit'\nimport Discover from './Discover'\nimport DitItemPage from './DitItemPage'\nimport DitList from './DitList'\nimport EditDitPage from './EditDitPage'\nimport { selectLogin } from './features/login/loginSlice'\nimport Header from './Header'\nimport Homepage from './Homepage'\nimport Person from './Person'\nimport Signup from './Signup'\nimport TagPage from './TagPage'\nimport usePreviousUri from './usePreviousUriAfterSolidRedirect'\n\nfunction App() {\n  usePreviousUri()\n\n  const login = useAppSelector(selectLogin)\n\n  if (login.status === 'loading') return <div>initializing</div>\n\n  if (!login.isLoggedIn)\n    return (\n      <div>\n        <Routes>\n          <Route path=\"*\" element={<Homepage />} />\n          <Route path=\"/signup\" element={<Signup />} />\n        </Routes>\n      </div>\n    )\n  return (\n    <div>\n      <Header />\n      <Routes>\n        <Route path=\"/\" element={<DitList />} />\n        <Route path=\"/discover\" element={<Discover />} />\n        <Route path=\"/people/:personId\" element={<Person />} />\n        <Route path=\"/create\" element={<CreateDit />} />\n        <Route path=\"/items/:itemUri\" element={<DitItemPage />} />\n        <Route path=\"/items/:itemUri/edit\" element={<EditDitPage />} />\n        <Route path=\"/tags/:tagUri\" element={<TagPage />} />\n      </Routes>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\nimport { store } from './app/store'\nimport { init } from './features/login/loginSlice'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\n// initialize application once at the beginning\nstore.dispatch(init())\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nconst root = createRoot(document.getElementById('root')!)\n\nroot.render(\n  <StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </StrictMode>,\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}